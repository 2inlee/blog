<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-13T20:33:48+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">시를 좋아하는 프로그래머</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>AlphateamInho</name></author><entry><title type="html">권한의 이해와 설정</title><link href="http://localhost:4000/system/2022/07/13/permission.html" rel="alternate" type="text/html" title="권한의 이해와 설정" /><published>2022-07-13T00:00:00+09:00</published><updated>2022-07-13T00:00:00+09:00</updated><id>http://localhost:4000/system/2022/07/13/permission</id><content type="html" xml:base="http://localhost:4000/system/2022/07/13/permission.html"><![CDATA[<h2 id="권한이란">권한이란?</h2>
<p>리눅스의 모든 파일과 디렉토리는 권한(permission)을 가지고 있다.       <br />
리눅스의 파일시스템 상에 권한에 대한 정보를 저장하는 부분이 있다.       <br />
퍼미션들은 시스템 상에 존재하는 파일들에 대한 읽기,쓰기,실행에 대한 접근 여부를 결정한다.       <br />
ls -l 명령어로 확인 가능 (첫번째 필드, -rwxr-wr–)      <br />
이러한 퍼미션은 다중 사용자 환경을 제공하는 리눅스 환경에서는 가장 기초적인 접근 통제 방법</p>

<p><img src="https://user-images.githubusercontent.com/95608811/178721039-e1d58298-5f8b-4631-9855-2d9f8a9ab85e.png" width="800px" /></p>

<h3 id="권한-설정-방법">권한 설정 방법</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">chmod [권한] [파일 또는 디렉토리 이름]</code></li>
  <li><code class="language-plaintext highlighter-rouge">[권한]</code> : 권한을 입력할 때는 심볼릭 모드와 옥텟(8진수) 모드 2가지 방식을 이용하여 입력 가능하다.</li>
  <li><code class="language-plaintext highlighter-rouge">[파일 또는 디렉토리 이름]</code> : 파일, 디렉토리를 지정할 때는 절대 경로 또는 상대 경로 모두 가능하다.</li>
</ul>

<h4 id="간단한-문자로-설정하는-심볼릭-모드">간단한 문자로 설정하는 심볼릭 모드</h4>

<p><img src="https://user-images.githubusercontent.com/95608811/178722799-93b80ea6-da07-454b-8348-6bc80a13dce4.png" width="800px" /></p>

<h4 id="07까지의-숫자를-이용하는-옥텟-모드">0~7까지의 숫자를 이용하는 옥텟 모드</h4>
<p><img src="https://user-images.githubusercontent.com/95608811/178723045-a3e07723-7860-4028-aec4-bf861bea8b42.png" width="800px" /></p>

<blockquote>
  <p>읽기 쓰기 실행 순서로 각각 4,2,1 이고, 읽기와 쓰기만 있으면 4+2인 6 쓰기와 실행만 있으면 2+1 인 3
이런식으로 옥텟모드를 사용한다.</p>
</blockquote>

<h3 id="파일-또는-디렉토리를-생성할-때-권한값을-결정하는-umask">파일 또는 디렉토리를 생성할 때 권한값을 결정하는 umask</h3>
<p><img src="https://user-images.githubusercontent.com/95608811/178723739-7380eb92-d892-49e7-b496-f97123799e5d.png" width="800px" /></p>

<ul>
  <li>umask 값은 리눅스를 처음 설치할때 022이 기본값으로 세팅되어 있는데, directory는 777, file은 666이
기본 값이라 각자의 권한값에서 umask 값을 뺀(and 연산) 한 값이 각자의 권한값 (옥텟)이 된다.</li>
</ul>]]></content><author><name>Ino</name></author><category term="System" /><category term="linux" /><summary type="html"><![CDATA[권한이란? 리눅스의 모든 파일과 디렉토리는 권한(permission)을 가지고 있다. 리눅스의 파일시스템 상에 권한에 대한 정보를 저장하는 부분이 있다. 퍼미션들은 시스템 상에 존재하는 파일들에 대한 읽기,쓰기,실행에 대한 접근 여부를 결정한다. ls -l 명령어로 확인 가능 (첫번째 필드, -rwxr-wr–) 이러한 퍼미션은 다중 사용자 환경을 제공하는 리눅스 환경에서는 가장 기초적인 접근 통제 방법]]></summary></entry><entry><title type="html">파일 및 디렉토리 검색 - grep/find</title><link href="http://localhost:4000/system/2022/07/13/grep.html" rel="alternate" type="text/html" title="파일 및 디렉토리 검색 - grep/find" /><published>2022-07-13T00:00:00+09:00</published><updated>2022-07-13T00:00:00+09:00</updated><id>http://localhost:4000/system/2022/07/13/grep</id><content type="html" xml:base="http://localhost:4000/system/2022/07/13/grep.html"><![CDATA[<h2 id="파일-내용에서-검색-grep">파일 내용에서 검색 grep</h2>
<ul>
  <li>파일 내용에서 특정 내용만 찾을때 사용</li>
  <li>grep [옵션] [패턴] [파일이름]</li>
  <li>[옵션] : 좀 더 디테일한 조건으로 찾을 때 사용</li>
  <li>[패턴] : 찾고 싶은 내용을 입력, 일치하는 내용을 출력. 정규표현식 사용 가능</li>
  <li>[파일 이름] : grep 명령어로 특정 내용을 검색할 파일을 지정한다.     <br />
<code class="language-plaintext highlighter-rouge">ex ) grep -i root/ect/id</code></li>
</ul>

<h3 id="옵션">옵션</h3>

<p><code class="language-plaintext highlighter-rouge">-i</code> : 대소문자 무시 (word와 WoRD 를 구분하지 않는다.)  <br />
<code class="language-plaintext highlighter-rouge">-n</code> : 줄 번호 표시 (line 넘버를 표시한다.) <br />
<code class="language-plaintext highlighter-rouge">-v</code> : 패턴을 제외한 내용만 출력  <br />
<code class="language-plaintext highlighter-rouge">-w</code> : 단어 단위로 검색 (ro 를 검색하면 root 는 찾지않는다.)  <br />
<code class="language-plaintext highlighter-rouge">-c</code> : 매칭되는 줄 수 표시  <br />
<code class="language-plaintext highlighter-rouge">-ㅣ</code> : 매칭되는 패턴이 있는 파일 이름 출력</p>

<h3 id="패턴">패턴</h3>
<p>정규표현식 : 어떤 문자를 표현할 때 다양한 특수문자를 이용해 표현하는 방식     <br />
<code class="language-plaintext highlighter-rouge">^</code> : 줄의 시작을 지정 (해당 패턴이 줄의 시작인 경우 캡쳐) <code class="language-plaintext highlighter-rouge">ex)^root</code> <br />
<code class="language-plaintext highlighter-rouge">$</code> : 줄의 마지막 지정  <code class="language-plaintext highlighter-rouge">ex)root$</code>  <br />
<code class="language-plaintext highlighter-rouge">.</code> : 한 문자 대치 <code class="language-plaintext highlighter-rouge">ex)r..t</code>  <br />
<code class="language-plaintext highlighter-rouge">*</code> : 여러 문제 대치 <code class="language-plaintext highlighter-rouge">ex)r*</code>  <br />
<code class="language-plaintext highlighter-rouge">[]</code> : 패턴 중 한 문자 일치 <code class="language-plaintext highlighter-rouge">ex)[rR]oot</code> <br />
<code class="language-plaintext highlighter-rouge">[^]</code> : 패턴 중 제외할 문자 지정 <code class="language-plaintext highlighter-rouge">ex)[^T]oot :: T를 제외한 oot 부분 출력</code></p>

<h3 id="특수문자들을-단순한-문자로만-인식-fgrep">특수문자들을 단순한 문자로만 인식 fgrep</h3>
<p><code class="language-plaintext highlighter-rouge">fgrep [옵션] [패턴] [파일이름]</code>  <br />
만약 문서에 특수문자가 포함된 경우 여러 특수문자들은 정규표현식으로 인식되기 때문에   <br />
해당 정규표현식의 기능으로 검색이 될 수 있다.   <br />
이런 경우 fgrep은 여러 특수문자들(*,$,. 등)을 단순한 문자로 인식해서
문서 내에서 해당 특수문자를 찾을 때 사용할 수 있다.</p>

<h2 id="디렉토리-내에서-검색-명령어-find">디렉토리 내에서 검색 명령어 find</h2>
<p><code class="language-plaintext highlighter-rouge">find [경로] [조건] [아규먼트] [행동]</code>  <br />
<code class="language-plaintext highlighter-rouge">[경로]</code> : 어디를 기준으로 검색할 것인지 입력한다.  하위 디렉토리까지 검색  <br />
<code class="language-plaintext highlighter-rouge">[조건]</code> : 어떤 조건으로 검색할 것인지 입력한다.  <br />
<code class="language-plaintext highlighter-rouge">[아규먼트]</code> : 조건에 맞는 값을 입력해준다.   <br />
<code class="language-plaintext highlighter-rouge">[행동]</code> : 검색 결과를 어떻게 처리할 것인지 입력한다.   <br />
<code class="language-plaintext highlighter-rouge">ex) find /-name file -exec rm -rf {}￦;</code> <br />
만약 행동은 빈칸으로 처리한다면 print 가 default로 입력된다.</p>

<h3 id="조건">조건</h3>
<p><code class="language-plaintext highlighter-rouge">name</code> : 이름으로 검색
<code class="language-plaintext highlighter-rouge">type</code> : 파일의 타입으로 검색, 디렉토리는 d,파일은 f  <br />
<code class="language-plaintext highlighter-rouge">perm</code> : 권한으로 검색  <br />
<code class="language-plaintext highlighter-rouge">user</code> : 소유자로 검색  <br />
<code class="language-plaintext highlighter-rouge">size</code> : 파일 크기로 검색, +는 이상, -는 이하, 단위는 512바이트   <br />
c 바이트, k 키로바이트, M 메가바이트, G 기가바이트    <br />
<code class="language-plaintext highlighter-rouge">atime</code> : 파일의 마지막 접근 시간으로 검색  <br />
<code class="language-plaintext highlighter-rouge">mtime</code> : 파일의 마지막 수정 시간으로 검색</p>

<h3 id="행동">행동</h3>
<p><code class="language-plaintext highlighter-rouge">ls</code> : 자세한 결과 출력 <br />
<code class="language-plaintext highlighter-rouge">exec [명령어] {} ￦;</code> : 검색한 파일을 특정 명령어로 실행  <br />
<code class="language-plaintext highlighter-rouge">ex ) -exec rm -rf {} ￦;</code> 제거하기</p>]]></content><author><name>Ino</name></author><category term="System" /><category term="linux" /><summary type="html"><![CDATA[파일 내용에서 검색 grep 파일 내용에서 특정 내용만 찾을때 사용 grep [옵션] [패턴] [파일이름] [옵션] : 좀 더 디테일한 조건으로 찾을 때 사용 [패턴] : 찾고 싶은 내용을 입력, 일치하는 내용을 출력. 정규표현식 사용 가능 [파일 이름] : grep 명령어로 특정 내용을 검색할 파일을 지정한다. ex ) grep -i root/ect/id]]></summary></entry><entry><title type="html">하드링크와 심볼릭 링크</title><link href="http://localhost:4000/system/2022/07/13/hardlink.html" rel="alternate" type="text/html" title="하드링크와 심볼릭 링크" /><published>2022-07-13T00:00:00+09:00</published><updated>2022-07-13T00:00:00+09:00</updated><id>http://localhost:4000/system/2022/07/13/hardlink</id><content type="html" xml:base="http://localhost:4000/system/2022/07/13/hardlink.html"><![CDATA[<h2 id="링크란-무엇인가">링크란 무엇인가?</h2>
<ul>
  <li>특정 파일 또는 디렉토리에 접근을 쉽게 할 수 있도록 하는 방법</li>
  <li>파일 시스템이 물리적인 장치인 하드 디스크 상에 저장되어 있는 특정 파일의 위치를 가리키는 것</li>
</ul>

<h3 id="하드링크">하드링크</h3>
<ul>
  <li>특정 파일 또는 디렉토리에 접근을 쉽게 할 수 있도록 하는 방법</li>
  <li>파일 시스템이 물리적인 장치인 하드 디스크 상에 저장되어 있는 특정 파일의 위치를 가리키는 것</li>
</ul>

<h3 id="심볼릭링크">심볼릭링크</h3>
<ul>
  <li>윈도우의 바로가기 개념과 슷하며 실질적인 디스크 상의 파일을 가리키는 것이 아니라 파일 시스템 상의 특정 파일을 가리키는 것</li>
</ul>

<h3 id="링크-생성-명령어">링크 생성 명령어</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ln [옵션] [원본] [링크]</code></li>
  <li>옵션을 지정하지 않고 링크 파일을 생성하면 하드 링크를 생성할 수 있다.</li>
  <li>옵션으로 -s 를 지정하고 링크 파일을 생성하면 심볼릭 링크를 생성할 수 있다.</li>
</ul>]]></content><author><name>Ino</name></author><category term="System" /><category term="linux" /><summary type="html"><![CDATA[링크란 무엇인가? 특정 파일 또는 디렉토리에 접근을 쉽게 할 수 있도록 하는 방법 파일 시스템이 물리적인 장치인 하드 디스크 상에 저장되어 있는 특정 파일의 위치를 가리키는 것]]></summary></entry><entry><title type="html">신경망</title><link href="http://localhost:4000/ai/2022/06/28/%EC%8B%A0%EA%B2%BD%EB%A7%9D.html" rel="alternate" type="text/html" title="신경망" /><published>2022-06-28T00:00:00+09:00</published><updated>2022-06-28T00:00:00+09:00</updated><id>http://localhost:4000/ai/2022/06/28/%EC%8B%A0%EA%B2%BD%EB%A7%9D</id><content type="html" xml:base="http://localhost:4000/ai/2022/06/28/%EC%8B%A0%EA%B2%BD%EB%A7%9D.html"><![CDATA[<h3 id="퍼셉트론">퍼셉트론</h3>
<p>오늘날 인공신경망에서 이용하는 구조는 퍼셉트론이라는 선형 분류기이다.
이는 입력과 가중치들의 곱을 모두 더한 뒤 활성화 함수를 적용해서 그 값이 0보다 크면 1, 0보다 작으면 -1을 출력하는 구조이다.</p>

<ima src="https://user-images.githubusercontent.com/95608811/176060497-7cb6bb9e-1493-4ac0-8209-48fb38ade3da.png" width="800px">

- 그래서 입력을 넣고 입력에 대한 결과를 출력하였을때 원하는 값이 나오도록 가중치를 조절한다.
학습이라는게 결국 그 가중치값을 가장 많은 입력에 대해 가장 근접한 가중치를 찾는 과정이라고 볼 수 있다.
</ima>]]></content><author><name>Ino</name></author><category term="ai" /><category term="ai" /><summary type="html"><![CDATA[퍼셉트론 오늘날 인공신경망에서 이용하는 구조는 퍼셉트론이라는 선형 분류기이다. 이는 입력과 가중치들의 곱을 모두 더한 뒤 활성화 함수를 적용해서 그 값이 0보다 크면 1, 0보다 작으면 -1을 출력하는 구조이다.]]></summary></entry><entry><title type="html">병렬처리와 수학적 행렬</title><link href="http://localhost:4000/ai/2022/06/27/AI_1.html" rel="alternate" type="text/html" title="병렬처리와 수학적 행렬" /><published>2022-06-27T00:00:00+09:00</published><updated>2022-06-27T00:00:00+09:00</updated><id>http://localhost:4000/ai/2022/06/27/AI_1</id><content type="html" xml:base="http://localhost:4000/ai/2022/06/27/AI_1.html"><![CDATA[<p>파이썬은 다수의 개발자들이 공동으로 개발하는 오픈소스 프로젝트가 많고 라이브러리들이 매우 빈번하게 업데이트가 되기 때문에 라이브러리들 간의 의존성이 매우 복잡하여 기존에 완성되어 잘 돌아가는 코드가 오류를 발생시킬 수 있다.  <br />
이 때문에 아나콘다를 이용하여 라이브러리 버전들을 유지하며 개발할 수 있도록 가상환경을 구성하는것이 좋다.</p>

<h2 id="data-생성">Data 생성</h2>

<h4 id="1차원">1차원</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">,(</span><span class="n">c</span><span class="p">,))</span>
</code></pre></div></div>
<ul>
  <li>s1 ~ s2 사이의 정수 c개 생성</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>0~1 사이의 숫자 r개 생성</li>
  <li>단 평균은0, 표준편차는 1인 분포</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>0~1 사이의 숫자 r개 생성</li>
  <li>단 균등 분포의 숫자</li>
</ul>

<h4 id="2차원">2차원</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">,(</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">))</span>
</code></pre></div></div>
<ul>
  <li>s1 ~ s2 사이의 정수 (r,c)개 생성</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>0~1사이 숫자 (r,c)개 생성</li>
  <li>단 평균은 0, 표준 편차는 1인 분포</li>
</ul>

<p>np.random.rand(r,c)</p>
<ul>
  <li>0~1 사이의 숫자 (r,c) 개 생성</li>
  <li>단 균등 분포의 숫자</li>
</ul>

<h3 id="변수-연산행렬-연산">변수 연산(행렬 연산)</h3>
<ul>
  <li>사칙 연산 지원 ( 단, shape가 동일해야 함 )</li>
  <li>행렬 내적 지원
(3,4) @ (4,5) = (3,5) 내적에서 이웃하는 부분이 일치해 함.</li>
</ul>

<h3 id="데이터-분리">데이터 분리</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,(</span><span class="mi">100</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
</code></pre></div></div>

<p>행분리 data1 = data[:20,:] &gt; 20개 데이터 분리 (20,8)
열분리 data2 = data[:,-3:] &gt; 100개의 데이터 (100,3)</p>

<ul>
  <li>정리하자면 ,(콤마) 기준으로 왼쪽은 행 오른쪽은 열을 슬라이싱한다.
그냥 파이썬 슬라이싱과 기본원리는 동일하나 행,열을 지원한다는 점에서 차별성이 있다.</li>
</ul>]]></content><author><name>Ino</name></author><category term="ai" /><category term="ai" /><summary type="html"><![CDATA[파이썬은 다수의 개발자들이 공동으로 개발하는 오픈소스 프로젝트가 많고 라이브러리들이 매우 빈번하게 업데이트가 되기 때문에 라이브러리들 간의 의존성이 매우 복잡하여 기존에 완성되어 잘 돌아가는 코드가 오류를 발생시킬 수 있다. 이 때문에 아나콘다를 이용하여 라이브러리 버전들을 유지하며 개발할 수 있도록 가상환경을 구성하는것이 좋다.]]></summary></entry><entry><title type="html">Java GUI and EventListener</title><link href="http://localhost:4000/java/2022/06/18/JavaEvent.html" rel="alternate" type="text/html" title="Java GUI and EventListener" /><published>2022-06-18T00:00:00+09:00</published><updated>2022-06-18T00:00:00+09:00</updated><id>http://localhost:4000/java/2022/06/18/JavaEvent</id><content type="html" xml:base="http://localhost:4000/java/2022/06/18/JavaEvent.html"><![CDATA[<p>``</p>
<blockquote>
  <p>먼저 모든 import문은 eclipse 자동생성으로 만드는걸 default로 한다.
즉, 코드에 import문은 넣지 않으므로 자동생성 해서 쓰길 권장한다.</p>
</blockquote>

<h3 id="입출력-스트림">입출력 스트림</h3>
<ul>
  <li>파일 객체 생성
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"c:\\windows\\system.ini"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">*</span> <span class="n">파일의</span> <span class="n">경로명</span>   
<span class="nc">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span> 	<span class="c1">// "system.ini"</span>
<span class="nc">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span> 			<span class="c1">// "c:\\windows\\system.ini"</span>
<span class="nc">String</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getParent</span><span class="o">();</span> 	<span class="c1">// "c:\\windows"</span>
</code></pre></div></div>

<h2 id="gui-라이브러리">GUI 라이브러리</h2>

<p><img src="https://user-images.githubusercontent.com/95608811/174436039-2b5a9a5c-844e-4b13-941d-0476009b3fa7.png" width="800px" /></p>

<p><img src="https://user-images.githubusercontent.com/95608811/174436141-cb7d575f-f761-4ca6-aff1-2d65656a1801.png" width="800px" /></p>

<h4 id="gui-swing-으로-스윙프레임-만들기">GUI Swing 으로 스윙프레임 만들기</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContentPaneEx</span> <span class="kd">extends</span> <span class="nc">JFrame</span> <span class="o">{</span>
<span class="kd">public</span> <span class="nf">ContentPaneEx</span><span class="o">()</span> <span class="o">{</span>
<span class="n">setTitle</span><span class="o">(</span><span class="s">"ContentPane과 JFrame"</span><span class="o">);</span>
<span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
<span class="nc">Container</span> <span class="n">contentPane</span> <span class="o">=</span> <span class="n">getContentPane</span><span class="o">();</span>
<span class="n">contentPane</span><span class="o">.</span><span class="na">setBackground</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">ORANGE</span><span class="o">);</span>
<span class="n">contentPane</span><span class="o">.</span><span class="na">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlowLayout</span><span class="o">());</span>
<span class="n">contentPane</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JButton</span><span class="o">(</span><span class="s">"OK"</span><span class="o">));</span>
<span class="n">contentPane</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JButton</span><span class="o">(</span><span class="s">"Cancel"</span><span class="o">));</span>
<span class="n">contentPane</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JButton</span><span class="o">(</span><span class="s">"Ignore"</span><span class="o">));</span>
<span class="n">setSize</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span> <span class="mi">150</span><span class="o">);</span>
<span class="n">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="k">new</span> <span class="nf">ContentPaneEx</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p><img src="https://user-images.githubusercontent.com/95608811/174436227-dbfc5823-32f4-478b-860e-ea8f9a15c8bd.png" width="400px" /></p>

<h4 id="스윙응용프로그램의-종료">스윙응용프로그램의 종료</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
</code></pre></div></div>
<p>를 써야하는 이유</p>

<p><img src="https://user-images.githubusercontent.com/95608811/174436263-cc4f0662-4685-4103-b804-fa4aebd3d709.png" width="800px" /></p>

<h4 id="배치관리자의-대표유형-4가지">배치관리자의 대표유형 4가지</h4>
<ul>
  <li>FlowLayout : 칸이 없는 그냥 공간속에 들어온 순서대로 밀어넣는 느낌</li>
  <li>BorderLayout : Top,Bottom,Left,Right,Center 다섯 부분으로 쪼개서 배열하는 방식</li>
  <li>GridLayout : 지정된 행,렬의 갯수만큼 배열하는 방식</li>
  <li>CardLayout : 겹겹이 카드 쌓는 느낌의 방식</li>
</ul>

<h4 id="라디오버튼-생성">라디오버튼 생성</h4>
<p><img src="https://user-images.githubusercontent.com/95608811/174437313-d7d2116b-7020-4501-a91e-7e25625a05aa.png" width="800px" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RadioButtonEx</span> <span class="kd">extends</span> <span class="nc">JFrame</span> <span class="o">{</span>
<span class="kd">public</span> <span class="nf">RadioButtonEx</span><span class="o">()</span> <span class="o">{</span>
<span class="n">setTitle</span><span class="o">(</span><span class="s">"라디오버튼 만들기 예제"</span><span class="o">);</span>
<span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
<span class="nc">Container</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getContentPane</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlowLayout</span><span class="o">());</span>
<span class="nc">ImageIcon</span> <span class="n">cherryIcon</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageIcon</span><span class="o">(</span><span class="s">"images/cherry.j pg"</span> <span class="o">);</span>
<span class="nc">ImageIcon</span> <span class="n">selectedCherryIcon</span> <span class="o">=</span>
<span class="k">new</span> <span class="nf">ImageIcon</span><span class="o">(</span><span class="s">"images/selectedCherry.jpg"</span><span class="o">);</span>
<span class="nc">ButtonGroup</span> <span class="n">g</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ButtonGroup</span><span class="o">();</span>
<span class="nc">JRadioButton</span> <span class="n">apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JRadioButton</span><span class="o">(</span><span class="s">"사과"</span><span class="o">);</span>
<span class="nc">JRadioButton</span> <span class="n">pear</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JRadioButton</span><span class="o">(</span><span class="s">"배"</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
<span class="nc">JRadioButton</span> <span class="n">cherry</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JRadioButton</span><span class="o">(</span><span class="s">"체리"</span><span class="o">,</span> <span class="n">cherryIcon</span><span class="o">);</span>
<span class="n">cherry</span><span class="o">.</span><span class="na">setBorderPainted</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">cherry</span><span class="o">.</span><span class="na">setSelectedIcon</span><span class="o">(</span><span class="n">selectedCherryIcon</span><span class="o">);</span>
<span class="n">g</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
<span class="n">g</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pear</span><span class="o">);</span>
<span class="n">g</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cherry</span><span class="o">);</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pear</span><span class="o">);</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cherry</span><span class="o">);</span>
<span class="n">setSize</span><span class="o">(</span><span class="mi">250</span><span class="o">,</span><span class="mi">150</span><span class="o">);</span>
<span class="n">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="k">new</span> <span class="nf">RadioButtonEx</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="간단한-텍스트필드-만들기">간단한 텍스트필드 만들기</h4>

<ul>
  <li>텍스트필드란?</li>
  <li>한 줄 짜리 텍스트(문자열) 입력 창을 구현한 컴포넌트</li>
  <li>텍스트 입력 도중 <code class="language-plaintext highlighter-rouge">Enter</code>키가 입력되면 Action 이벤트 발생</li>
  <li>입력 가능한 문자 개수와 입력 창의 크기는 서로 다름</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextFieldEx</span> <span class="kd">extends</span> <span class="nc">JFrame</span> <span class="o">{</span>
<span class="kd">public</span> <span class="nf">TextFieldEx</span><span class="o">()</span> <span class="o">{</span>
<span class="n">setTitle</span><span class="o">(</span><span class="s">"텍스트필드 만들기 예제"</span><span class="o">);</span>
<span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
<span class="nc">Container</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getContentPane</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlowLayout</span><span class="o">());</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JLabel</span><span class="o">(</span><span class="s">"이름 "</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JTextField</span><span class="o">(</span><span class="mi">20</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JLabel</span><span class="o">(</span><span class="s">"학과 "</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JTextField</span><span class="o">(</span><span class="s">"컴퓨터공학과 "</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JLabel</span><span class="o">(</span><span class="s">"주소 "</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JTextField</span><span class="o">(</span><span class="s">"서울시 ..."</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
<span class="n">setSize</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span><span class="mi">150</span><span class="o">);</span>
<span class="n">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="k">new</span> <span class="nf">TextFieldEx</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="jtextarea-컴포넌트-생성">JTextArea 컴포넌트 생성</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span> <span class="kn">import</span> <span class="nn">java.awt.event.*</span><span class="o">;</span> <span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextAreaEx</span> <span class="kd">extends</span> <span class="nc">JFrame</span> <span class="o">{</span>
<span class="kd">private</span> <span class="nc">JTextField</span> <span class="n">tf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JTextField</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
<span class="kd">private</span> <span class="nc">JTextArea</span> <span class="n">ta</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JTextArea</span><span class="o">(</span><span class="mi">7</span><span class="o">,</span> <span class="mi">20</span><span class="o">);</span>
<span class="kd">public</span> <span class="nf">TextAreaEx</span><span class="o">()</span> <span class="o">{</span>
<span class="n">setTitle</span><span class="o">(</span><span class="s">"텍스트영역 만들기 예제"</span><span class="o">);</span>
<span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
<span class="nc">Container</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getContentPane</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlowLayout</span><span class="o">());</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JLabel</span><span class="o">(</span><span class="s">"입력 후 &lt;Enter&gt; 키를 입력하세요"</span><span class="o">));</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tf</span><span class="o">);</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JScrollPane</span><span class="o">(</span><span class="n">ta</span><span class="o">));</span>
<span class="n">tf</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">ActionListener</span><span class="o">()</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="nc">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">JTextField</span> <span class="n">t</span> <span class="o">=</span> <span class="o">(</span><span class="nc">JTextField</span><span class="o">)</span><span class="n">e</span><span class="o">.</span><span class="na">getSource</span><span class="o">();</span>
<span class="n">ta</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
<span class="n">t</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">});</span>
<span class="n">setSize</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span><span class="mi">300</span><span class="o">);</span>
<span class="n">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="k">new</span> <span class="nf">TextAreaEx</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="리스트-만들기">리스트 만들기</h4>

<ul>
  <li>리스트 컴포넌트란?</li>
  <li>여러 개의 아이템을 리스트 형식으로 보여주고 선택하는 컴포넌트</li>
  <li><code class="language-plaintext highlighter-rouge">JComboBox&lt;E&gt;</code>와 기본적으로 같은 기능</li>
  <li><code class="language-plaintext highlighter-rouge">JScrollPane에 JList&lt;E&gt;</code>를 삽입하여 스크롤 가능</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListEx</span> <span class="kd">extends</span> <span class="nc">JFrame</span> <span class="o">{</span>
<span class="kd">private</span> <span class="nc">String</span> <span class="o">[]</span> <span class="n">fruits</span><span class="o">=</span> <span class="o">{</span><span class="s">"apple"</span><span class="o">,</span> <span class="s">"banana"</span><span class="o">,</span> <span class="s">"kiwi"</span><span class="o">,</span> <span class="s">"mango"</span><span class="o">,</span> <span class="s">"pear"</span><span class="o">,</span>
<span class="s">"peach"</span><span class="o">,</span> <span class="s">"berry"</span><span class="o">,</span> <span class="s">"strawberry"</span><span class="o">,</span> <span class="s">"blackberry"</span><span class="o">};</span>
<span class="kd">private</span> <span class="nc">ImageIcon</span> <span class="o">[]</span> <span class="n">images</span> <span class="o">=</span> <span class="o">{</span>
<span class="k">new</span> <span class="nf">ImageIcon</span><span class="o">(</span><span class="s">"images/icon1.png"</span><span class="o">),</span>
<span class="k">new</span> <span class="nf">ImageIcon</span><span class="o">(</span><span class="s">"images/icon2.png"</span><span class="o">),</span>
<span class="k">new</span> <span class="nf">ImageIcon</span><span class="o">(</span><span class="s">"images/icon3.png"</span><span class="o">),</span>
<span class="k">new</span> <span class="nf">ImageIcon</span><span class="o">(</span><span class="s">"images/icon4.png"</span><span class="o">)</span> <span class="o">};</span>
<span class="kd">public</span> <span class="nf">ListEx</span><span class="o">()</span> <span class="o">{</span>
<span class="n">setTitle</span><span class="o">(</span><span class="s">"리스트 만들기 예제"</span><span class="o">);</span>
<span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
<span class="nc">Container</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getContentPane</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlowLayout</span><span class="o">());</span>
<span class="nc">JList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">strList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;(</span><span class="n">fruits</span><span class="o">);</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">strList</span><span class="o">);</span>
<span class="nc">JList</span><span class="o">&lt;</span><span class="nc">ImageIcon</span><span class="o">&gt;</span> <span class="n">imageList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JList</span><span class="o">&lt;</span><span class="nc">ImageIcon</span><span class="o">&gt;();</span>
<span class="n">imageList</span><span class="o">.</span><span class="na">setListData</span><span class="o">(</span><span class="n">images</span><span class="o">);</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">imageList</span><span class="o">);</span>
<span class="nc">JList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">scrollList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;(</span><span class="n">fruits</span><span class="o">);</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JScrollPane</span><span class="o">(</span><span class="n">scrollList</span><span class="o">));</span>
<span class="n">setSize</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span><span class="mi">300</span><span class="o">);</span>
<span class="n">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="k">new</span> <span class="nf">ListEx</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="jslider-컴포넌트">JSlider 컴포넌트</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SliderEx</span> <span class="kd">extends</span> <span class="nc">JFrame</span> <span class="o">{</span>
<span class="kd">public</span> <span class="nf">SliderEx</span><span class="o">()</span> <span class="o">{</span>
<span class="n">setTitle</span><span class="o">(</span><span class="s">"슬라이더 만들기 예제"</span><span class="o">);</span>
<span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
<span class="nc">Container</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getContentPane</span><span class="o">();</span>
<span class="n">c</span><span class="o">.</span><span class="na">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlowLayout</span><span class="o">());</span>
<span class="nc">JSlider</span> <span class="n">slider</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSlider</span><span class="o">(</span><span class="nc">JSlider</span><span class="o">.</span><span class="na">HORIZONTAL</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">200</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
<span class="n">slider</span><span class="o">.</span><span class="na">setPaintLabels</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">slider</span><span class="o">.</span><span class="na">setPaintTicks</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">slider</span><span class="o">.</span><span class="na">setPaintTrack</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">slider</span><span class="o">.</span><span class="na">setMajorTickSpacing</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
<span class="n">slider</span><span class="o">.</span><span class="na">setMinorTickSpacing</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">slider</span><span class="o">);</span>
<span class="n">setSize</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span><span class="mi">100</span><span class="o">);</span>
<span class="n">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="k">new</span> <span class="nf">SliderEx</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">java.awt.Container</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.FlowLayout</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ActionEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ActionListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.swing.JButton</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.swing.JComboBox</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.swing.JFrame</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.swing.JLabel</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.swing.JTextField</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainProg</span> <span class="kd">extends</span> <span class="nc">JFrame</span><span class="o">{</span>
   <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="n">stList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;();</span> <span class="c1">// ArrayList stList 생성</span>
   <span class="nc">JButton</span> <span class="n">btnIns</span><span class="o">,</span> <span class="n">btnOut</span><span class="o">,</span> <span class="n">btnBat</span><span class="o">,</span> <span class="n">btnDis</span><span class="o">;</span> <span class="c1">// JButton 4개 객체 생성</span>
   <span class="nc">JTextField</span> <span class="n">tf_id</span><span class="o">,</span> <span class="n">tf_name</span><span class="o">;</span> <span class="c1">// JTextField id 랑 name 객체 생성</span>
   <span class="nc">JComboBox</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">cb_hk</span><span class="o">;</span> <span class="c1">// JComboBox 생성</span>
   <span class="kd">public</span> <span class="nf">MainProg</span><span class="o">()</span> <span class="o">{</span>
      <span class="n">createGUI</span><span class="o">();</span> <span class="c1">// GUI 만드는 함수호출</span>
      <span class="n">btnDis</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">ActionListener</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// btnDis의 이벤트 리스너 </span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="nc">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">try</span> <span class="o">{</span> <span class="c1">// try-catch 구문, 시도했을 때 잘되면 try 구문 실행, 에러발생시 catch구문 실행</span>
        	 <span class="nc">FileWriter</span> <span class="n">fo</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="s">"test.txt"</span><span class="o">);</span> <span class="c1">// FileWriter 을 실행한는 fo 객체 생성</span>
        	 <span class="k">for</span><span class="o">(</span><span class="nc">Student</span> <span class="nl">stu:</span><span class="n">stList</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//Student의 stu:stList 의 갯수만큼 반복실행</span>
        		 <span class="n">fo</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">stu</span><span class="o">.</span><span class="na">getStudentId</span><span class="o">()+</span><span class="s">" "</span><span class="o">+</span><span class="n">stu</span><span class="o">.</span><span class="na">getStudentName</span><span class="o">()+</span><span class="s">" "</span><span class="o">+</span><span class="n">stu</span><span class="o">.</span><span class="na">getMajor</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span> <span class="c1">// fo 객체에 있는 파일 wirte, stu에 있는 di,name,major 작성</span>
        	 <span class="o">}</span>
        	 <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"파일생성이 완료되었습니다."</span><span class="o">);</span>
			 <span class="n">fo</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 한번 쓴 파일은 다시 close 해주어야함</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"파일생성오류입니다."</span><span class="o">);</span> <span class="c1">// 그냥 잘 생성 안되면, println 구문실행</span>
			<span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
         
      	<span class="o">}</span>
      <span class="o">});</span>
      
      <span class="n">btnIns</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">ActionListener</span><span class="o">()</span> <span class="o">{</span> <span class="c1">//btnIns 액션 만들기</span>
         
         <span class="nd">@Override</span>
         <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="nc">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">tf_id</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
            <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">tf_name</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
            <span class="nc">String</span> <span class="n">hk</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)(</span><span class="n">cb_hk</span><span class="o">.</span><span class="na">getSelectedItem</span><span class="o">());</span>
            <span class="n">stList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">hk</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"입력됨"</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">id</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">hk</span><span class="o">);</span>
         <span class="o">}</span>
      <span class="o">});</span>

      
      <span class="n">btnOut</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">ActionListener</span><span class="o">()</span> <span class="o">{</span>
         
         <span class="nd">@Override</span>
         <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="nc">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"----------------------------------------------------"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"|   학번   |      이름      |       학과       |"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"----------------------------------------------------"</span><span class="o">);</span>
            <span class="k">for</span><span class="o">(</span><span class="nc">Student</span> <span class="n">stu</span> <span class="o">:</span> <span class="n">stList</span><span class="o">)</span> <span class="o">{</span>
               <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stu</span><span class="o">.</span><span class="na">getStudentId</span><span class="o">()+</span><span class="s">"            "</span><span class="o">+</span><span class="n">stu</span><span class="o">.</span><span class="na">getStudentName</span><span class="o">()+</span><span class="s">"          "</span><span class="o">+</span><span class="n">stu</span><span class="o">.</span><span class="na">getMajor</span><span class="o">());</span>
            <span class="o">}</span>
            
         <span class="o">}</span>
      <span class="o">});</span>
      <span class="n">btnBat</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">ActionListener</span><span class="o">()</span> <span class="o">{</span>
		
		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="nc">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">try</span> <span class="o">{</span> <span class="c1">//Scanner 객체 scan에 FileReader 해서 txt 파일입력</span>
				<span class="nc">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="s">"C:\\Users\\studentInfo.txt"</span><span class="o">));</span> <span class="c1">// scan 해올 경로 작성</span>
				<span class="k">while</span><span class="o">(</span><span class="n">scan</span><span class="o">.</span><span class="na">hasNextLine</span><span class="o">()==</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
					<span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
					<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
					<span class="kt">int</span> <span class="n">hkCode</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
					<span class="nc">String</span> <span class="n">hk</span><span class="o">=</span><span class="s">""</span><span class="o">;</span>
					<span class="k">if</span> <span class="o">(</span><span class="n">hkCode</span> <span class="o">==</span> <span class="nc">Define</span><span class="o">.</span><span class="na">SW</span><span class="o">){</span>
          <span class="c1">// Define 클래스에서 각 Major를 static final 상수로 선언 (final로 선언된 상수는 바꿀 수 없음 )</span>
          <span class="c1">// public class Define {</span>
          <span class="c1">// public static final int SW = 1001;</span>
          <span class="c1">// public static final int INFO = 1002;</span>
          <span class="c1">// public static final int TONGSIN = 2001;</span>
          <span class="c1">// public static final int KY = 4001;</span>
          <span class="c1">// public static final int AI = 1003;</span>
          <span class="c1">// }</span>

					<span class="n">hk</span> <span class="o">=</span> <span class="s">"컴퓨터소프트웨어공학과"</span><span class="o">;</span>
					<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">hkCode</span> <span class="o">==</span><span class="nc">Define</span><span class="o">.</span><span class="na">INFO</span><span class="o">)</span> <span class="o">{</span>
						<span class="n">hk</span> <span class="o">=</span> <span class="s">"컴퓨터정보과"</span><span class="o">;</span>
					<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">hkCode</span> <span class="o">==</span><span class="nc">Define</span><span class="o">.</span><span class="na">TONGSIN</span><span class="o">)</span> <span class="o">{</span>
						<span class="n">hk</span> <span class="o">=</span> <span class="s">"정보통신과"</span><span class="o">;</span>
					<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">hkCode</span> <span class="o">==</span><span class="nc">Define</span><span class="o">.</span><span class="na">KY</span><span class="o">)</span> <span class="o">{</span>
						<span class="n">hk</span> <span class="o">=</span> <span class="s">"경영학과"</span><span class="o">;</span>
					<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">hkCode</span><span class="o">==</span><span class="nc">Define</span><span class="o">.</span><span class="na">AI</span><span class="o">)</span> <span class="o">{</span>
						<span class="n">hk</span> <span class="o">=</span> <span class="s">"인공지능과"</span><span class="o">;</span>
					<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
						<span class="n">hk</span> <span class="o">=</span> <span class="s">"전공학과오류입니다"</span><span class="o">;</span>
					<span class="o">}</span>
					<span class="n">stList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="n">id</span><span class="o">,</span><span class="n">name</span><span class="o">,</span><span class="n">hk</span><span class="o">));</span>
				<span class="o">}</span>
				<span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"일괄입력했습니다"</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileNotFoundException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"파일입력에러"</span><span class="o">);</span>
			<span class="o">}</span>
			
		<span class="o">}</span>
	<span class="o">});</span>
   <span class="o">}</span>
   <span class="kd">private</span> <span class="kt">void</span> <span class="nf">createGUI</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">"Project"</span><span class="o">);</span> <span class="c1">// Title 이름 설정</span>
      <span class="k">this</span><span class="o">.</span><span class="na">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
      <span class="nc">Container</span> <span class="n">con</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getContentPane</span><span class="o">();</span> <span class="c1">// Container 객체 con 을 getContentPane으로 생성</span>
      <span class="n">con</span><span class="o">.</span><span class="na">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">FlowLayout</span><span class="o">());</span>

      <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JLabel</span><span class="o">(</span><span class="s">"학번"</span><span class="o">))</span>
      <span class="n">tf_id</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JTextField</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
      <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tf_id</span><span class="o">);</span>
      <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JLabel</span><span class="o">(</span><span class="s">"이름"</span><span class="o">));</span>
      <span class="n">tf_name</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JTextField</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
      <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tf_name</span><span class="o">);</span>
      <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">JLabel</span><span class="o">(</span><span class="s">"학과"</span><span class="o">));</span>
      <span class="nc">String</span><span class="o">[]</span> <span class="n">hkdatas</span> <span class="o">=</span> <span class="o">{</span><span class="s">"컴퓨터소프트웨어공학과"</span><span class="o">,</span> <span class="s">"컴퓨터정보과"</span><span class="o">,</span> <span class="s">"전기전자정보통신과"</span><span class="o">,</span> <span class="s">"디자인과"</span><span class="o">,</span> <span class="s">"경영학과"</span><span class="o">,</span> <span class="s">"이스포츠인공지능학과"</span>   <span class="o">};</span>
      <span class="n">cb_hk</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JComboBox</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;(</span><span class="n">hkdatas</span><span class="o">);</span>
      <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb_hk</span><span class="o">);</span>
      <span class="n">btnBat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JButton</span><span class="o">(</span><span class="s">"일괄입력"</span><span class="o">);</span>
      <span class="n">btnIns</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JButton</span><span class="o">(</span><span class="s">"입력"</span><span class="o">);</span>
      <span class="n">btnDis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JButton</span><span class="o">(</span><span class="s">"파일출력"</span><span class="o">);</span>
      <span class="n">btnOut</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JButton</span><span class="o">(</span><span class="s">"보고서출력"</span><span class="o">);</span>
      <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">btnBat</span><span class="o">);</span> <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">btnIns</span><span class="o">);</span> <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">btnDis</span><span class="o">);</span> <span class="n">con</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">btnOut</span><span class="o">);</span>
      <span class="k">this</span><span class="o">.</span><span class="na">setSize</span><span class="o">(</span><span class="mi">270</span><span class="o">,</span><span class="mi">500</span><span class="o">);</span>
      <span class="k">this</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
   <span class="o">}</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">new</span> <span class="nf">MainProg</span><span class="o">();</span>
   <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Ino</name></author><category term="java" /><category term="java" /><category term="gui" /><summary type="html"><![CDATA[`` 먼저 모든 import문은 eclipse 자동생성으로 만드는걸 default로 한다. 즉, 코드에 import문은 넣지 않으므로 자동생성 해서 쓰길 권장한다.]]></summary></entry><entry><title type="html">TodoList for Vue.js</title><link href="http://localhost:4000/web/2022/06/16/VueTodo.html" rel="alternate" type="text/html" title="TodoList for Vue.js" /><published>2022-06-16T00:00:00+09:00</published><updated>2022-06-16T00:00:00+09:00</updated><id>http://localhost:4000/web/2022/06/16/VueTodo</id><content type="html" xml:base="http://localhost:4000/web/2022/06/16/VueTodo.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">set-ExecutionPolicy -ExecutionPolicy Unrestricted</code> : 권한오류    <br />
<code class="language-plaintext highlighter-rouge">npm install -g @vue/cli</code> : vue를 전역에 설치   <br />
<code class="language-plaintext highlighter-rouge">vue create project01</code> : vue 디렉토리 생성    <br />
<code class="language-plaintext highlighter-rouge">vue add router</code> : router 추가 / 처음 vue 만들때 router 옵션 체크</p>

<p><code class="language-plaintext highlighter-rouge">npm run lint</code> : 린트 에러 해결   <br />
<code class="language-plaintext highlighter-rouge">vue add vuetify</code> : vuetify 설치    <br />
<code class="language-plaintext highlighter-rouge">npm run serve</code> : 실시간 미리보기</p>

<ul>
  <li>material designIcon : 아이콘 퍼오기</li>
</ul>
<p><a href="https://materialdesignicons.com/">https://materialdesignicons.com/</a></p>

<h2 id="todo-list만들기">Todo-List만들기</h2>
<h3 id="appvue-코드">App.vue 코드</h3>
<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;v-app</span> <span class="na">id=</span><span class="s">"inspire"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;v-navigation-drawer</span> <span class="na">v-model=</span><span class="s">"drawer"</span> <span class="na">app</span><span class="nt">&gt;</span>
      <span class="nt">&lt;v-list-item&gt;</span>
        <span class="nt">&lt;v-list-item-content&gt;</span>
          <span class="nt">&lt;v-list-item-title</span> <span class="na">class=</span><span class="s">"text-h6"</span><span class="nt">&gt;</span>ToDo List <span class="nt">&lt;/v-list-item-title&gt;</span>
          <span class="nt">&lt;v-list-item-subtitle&gt;</span>Vuetify-Todo<span class="nt">&lt;/v-list-item-subtitle&gt;</span>
        <span class="nt">&lt;/v-list-item-content&gt;</span>
      <span class="nt">&lt;/v-list-item&gt;</span>

      <span class="nt">&lt;v-divider&gt;&lt;/v-divider&gt;</span>

      <span class="nt">&lt;v-list</span> <span class="na">dense</span> <span class="na">nav</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-list-item</span> <span class="na">v-for=</span><span class="s">"a in items"</span> <span class="na">:key=</span><span class="s">"a.title"</span> <span class="na">:to=</span><span class="s">"a.to"</span> <span class="na">link</span><span class="nt">&gt;</span>
          <span class="nt">&lt;v-list-item-icon&gt;</span>
            <span class="nt">&lt;v-icon&gt;&lt;/v-icon&gt;</span>
          <span class="nt">&lt;/v-list-item-icon&gt;</span>

          <span class="nt">&lt;v-list-item-content&gt;</span>
            <span class="nt">&lt;v-list-item-title&gt;&lt;/v-list-item-title&gt;</span>
          <span class="nt">&lt;/v-list-item-content&gt;</span>
        <span class="nt">&lt;/v-list-item&gt;</span>
      <span class="nt">&lt;/v-list&gt;</span>
    <span class="nt">&lt;/v-navigation-drawer&gt;</span>

    <span class="nt">&lt;v-app-bar</span> <span class="na">app</span> <span class="na">color=</span><span class="s">"#fcb69f"</span> <span class="na">dark</span> <span class="na">src=</span><span class="s">"playground.jpg"</span> <span class="na">prominent</span><span class="nt">&gt;</span>
      <span class="nt">&lt;template</span> <span class="na">v-slot:img=</span><span class="s">"</span>{ props }"&gt;
        <span class="nt">&lt;v-img</span>
          <span class="na">v-bind=</span><span class="s">"props"</span>
          <span class="na">gradient=</span><span class="s">"to top right, rgba(19,84,122,.5), rgba(128,208,199,.8)"</span>
        <span class="nt">&gt;&lt;/v-img&gt;</span>
      <span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

      <span class="nt">&lt;v-app-bar-nav-icon</span> <span class="err">@</span><span class="na">click=</span><span class="s">"drawer = !drawer"</span><span class="nt">&gt;&lt;/v-app-bar-nav-icon&gt;</span>

      <span class="nt">&lt;v-app-bar-title&gt;</span>오늘 할일 하기<span class="nt">&lt;/v-app-bar-title&gt;</span>

      <span class="nt">&lt;v-spacer&gt;&lt;/v-spacer&gt;</span>

      <span class="nt">&lt;v-btn</span> <span class="na">icon</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-icon&gt;</span>mdi-magnify<span class="nt">&lt;/v-icon&gt;</span>
      <span class="nt">&lt;/v-btn&gt;</span>

      <span class="nt">&lt;v-btn</span> <span class="na">icon</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-icon&gt;</span>mdi-heart<span class="nt">&lt;/v-icon&gt;</span>
      <span class="nt">&lt;/v-btn&gt;</span>

      <span class="nt">&lt;v-btn</span> <span class="na">icon</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-icon&gt;</span>mdi-dots-vertical<span class="nt">&lt;/v-icon&gt;</span>
      <span class="nt">&lt;/v-btn&gt;</span>
    <span class="nt">&lt;/v-app-bar&gt;</span>

    <span class="nt">&lt;v-main&gt;</span>
      <span class="nt">&lt;router-view&gt;&lt;/router-view&gt;</span>
    <span class="nt">&lt;/v-main&gt;</span>
  <span class="nt">&lt;/v-app&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">drawer</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">items</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Todo</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">icon</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mdi-checkbox-marked-circle-plus-outline</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">to</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">About</span><span class="dl">"</span><span class="p">,</span> <span class="na">icon</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mdi-help-box</span><span class="dl">"</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span> <span class="p">},</span>
    <span class="p">],</span>
    <span class="na">right</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">}),</span>
<span class="p">};</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h3 id="todovue-코드">todo.vue 코드</h3>
<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"home"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;v-text-field</span>
      <span class="na">outlined</span>
      <span class="na">label=</span><span class="s">"해야할일 추가"</span>
      <span class="na">append-icon=</span><span class="s">"mdi-plus-box-multiple-outline"</span>
      <span class="na">class=</span><span class="s">"pa-3"</span>
      <span class="na">hide-details</span>
      <span class="na">clearable</span>
      <span class="na">v-model=</span><span class="s">"newTaskTitle"</span>
      <span class="err">@</span><span class="na">click:append=</span><span class="s">"addTask"</span>
      <span class="err">@</span><span class="na">keyup.enter=</span><span class="s">"addTask"</span>
    <span class="nt">&gt;</span>
    <span class="nt">&lt;/v-text-field&gt;</span>

    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;v-list</span> <span class="na">class=</span><span class="s">"pa-0"</span> <span class="na">flat</span> <span class="na">v-if=</span><span class="s">"tasks.length"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">v-for=</span><span class="s">"(할일, idx) in tasks"</span> <span class="na">:key=</span><span class="s">"idx"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;v-list-item</span>
            <span class="err">@</span><span class="na">click=</span><span class="s">"doneTask(할일.id)"</span>
            <span class="na">:class=</span><span class="s">"</span>{ 'blue lighten-5': 할일.done }"
          &gt;
            <span class="nt">&lt;template&gt;</span>
              <span class="nt">&lt;v-list-item-action&gt;</span>
                <span class="nt">&lt;v-checkbox</span> <span class="na">:input-value=</span><span class="s">"할일.done"</span> <span class="na">color=</span><span class="s">"primary"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;/v-checkbox&gt;</span>
              <span class="nt">&lt;/v-list-item-action&gt;</span>

              <span class="nt">&lt;v-list-item-content&gt;</span>
                <span class="nt">&lt;v-list-item-title</span>
                  <span class="na">:class=</span><span class="s">"</span>{ 'text-decoration-line-through': 할일.done }"
                &gt;
                  
                <span class="nt">&lt;/v-list-item-title&gt;</span>
              <span class="nt">&lt;/v-list-item-content&gt;</span>
              <span class="nt">&lt;v-btn</span> <span class="na">icon</span> <span class="err">@</span><span class="na">click.stop=</span><span class="s">"deleteTask(할일.id)"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;v-icon</span> <span class="na">color=</span><span class="s">"primary lighten-1"</span><span class="nt">&gt;</span>mdi-delete<span class="nt">&lt;/v-icon&gt;</span>
              <span class="nt">&lt;/v-btn&gt;</span>
            <span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>
          <span class="nt">&lt;/v-list-item&gt;</span>
          <span class="nt">&lt;v-divider&gt;&lt;/v-divider&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/v-list&gt;</span>

      <span class="nt">&lt;div</span> <span class="na">v-else</span> <span class="na">class=</span><span class="s">"no-tasks"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-icon</span> <span class="na">size=</span><span class="s">"100"</span> <span class="na">color=</span><span class="s">"primary"</span><span class="nt">&gt;</span> mdi-check <span class="nt">&lt;/v-icon&gt;&lt;br</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"text-h5 primary--text"</span><span class="nt">&gt;</span>할일 없냐?<span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ToDo</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">tasks</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">학교 가기</span><span class="dl">"</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">학식 먹기</span><span class="dl">"</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">과제 하기</span><span class="dl">"</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
      <span class="p">],</span>
      <span class="na">newTaskTitle</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">addTask</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">newTask</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span>
        <span class="na">title</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">newTaskTitle</span><span class="p">,</span>
        <span class="na">done</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">};</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newTask</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">newTaskTitle</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">doneTask</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">할일</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">할일</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">할일</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">id</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
      <span class="nx">할일</span><span class="p">.</span><span class="nx">done</span> <span class="o">=</span> <span class="o">!</span><span class="nx">할일</span><span class="p">.</span><span class="nx">done</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">deleteTask</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">할일</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">할일</span><span class="p">.</span><span class="nx">id</span> <span class="o">!==</span> <span class="nx">id</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">);</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">style</span> <span class="na">lang=</span><span class="s">"sass"</span><span class="nt">&gt;</span>
<span class="nc">.no-tasks</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span>
  <span class="nl">left</span><span class="p">:</span><span class="m">50%</span>
  <span class="nl">top</span><span class="p">:</span><span class="m">50%</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="nf">translate</span><span class="p">(</span><span class="m">-50%</span><span class="o">,-</span><span class="m">50%</span><span class="p">)</span>
  <span class="nl">opacity</span><span class="p">:</span><span class="m">0</span><span class="mi">.6</span>
<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h3 id="indexjs-코드">index.js 코드</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Vue</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">vue</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">VueRouter</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">vue-router</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Todo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../views/ToDo.vue</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">routes</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Todo</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">component</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">About</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// route level code-splitting</span>
    <span class="c1">// this generates a separate chunk (about.[hash].js) for this route</span>
    <span class="c1">// which is lazy-loaded when the route is visited.</span>
    <span class="na">component</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span>
      <span class="k">import</span><span class="p">(</span><span class="cm">/* webpackChunkName: "about" */</span> <span class="dl">"</span><span class="s2">../views/AboutView.vue</span><span class="dl">"</span><span class="p">),</span>
  <span class="p">},</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
  <span class="nx">routes</span><span class="p">,</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>Ino</name></author><category term="web" /><category term="vue" /><category term="web" /><summary type="html"><![CDATA[set-ExecutionPolicy -ExecutionPolicy Unrestricted : 권한오류 npm install -g @vue/cli : vue를 전역에 설치 vue create project01 : vue 디렉토리 생성 vue add router : router 추가 / 처음 vue 만들때 router 옵션 체크]]></summary></entry><entry><title type="html">Search Tree(트리탐색)for C</title><link href="http://localhost:4000/algorithm/2022/06/14/SearchTreeForC.html" rel="alternate" type="text/html" title="Search Tree(트리탐색)for C" /><published>2022-06-14T00:00:00+09:00</published><updated>2022-06-14T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/06/14/SearchTreeForC</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/06/14/SearchTreeForC.html"><![CDATA[<h2 id="트리검색">트리검색</h2>
<p>탐색을 하기에 가장 적합하고 많이 사용하는 구조가 트리구조이다. 특히 프로그램의 논리는 if 조건문의 참이나 거짓 두 갈래의 선택이 있는 이진구조이므로 이를 반영하여 문제 분석과 설계 단계에서 자연스럽게 이진트리가 자주 사용된다.</p>

<p>이진탐색트리는 공백이 가능한 이진 트리로 공백이 아니면 다음의 성질을 만족한다.</p>

<ol>
  <li>모든 원소는 key를 갖는다.</li>
  <li>공백이 아닌 왼쪽 서브트리의 key들은 그의 루트의 key보다 작아야한다.</li>
  <li>공백이 아닌 오른쪽 서브트리의 key들은 그의 루트의 key보다 커야한다.</li>
  <li>왼쪽과 오른쪽 서브트리도 또한 이진 탐색 트리이다 (재귀적정의)</li>
</ol>

<p>``</p>]]></content><author><name>Ino</name></author><category term="algorithm" /><category term="C" /><category term="algorithm" /><summary type="html"><![CDATA[트리검색 탐색을 하기에 가장 적합하고 많이 사용하는 구조가 트리구조이다. 특히 프로그램의 논리는 if 조건문의 참이나 거짓 두 갈래의 선택이 있는 이진구조이므로 이를 반영하여 문제 분석과 설계 단계에서 자연스럽게 이진트리가 자주 사용된다.]]></summary></entry><entry><title type="html">구조체 for C</title><link href="http://localhost:4000/algorithm/2022/06/13/%EA%B5%AC%EC%A1%B0%EC%B2%B4forC.html" rel="alternate" type="text/html" title="구조체 for C" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/06/13/%EA%B5%AC%EC%A1%B0%EC%B2%B4forC</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/06/13/%EA%B5%AC%EC%A1%B0%EC%B2%B4forC.html"><![CDATA[<h2 id="구조체를-이용한-파일처리">구조체를 이용한 파일처리</h2>
<p>프로그래밍에 필요한 데이터가 파일로 제공되는 경우 각 파일에는 필요한 필드로 구성된
레코드를 저장하는 경우가 많다. 이렇게 저장된 파일의 데이터를 프로그램에서 사용하려면
구조체를 활용해야한다.</p>
<ul>
  <li>구조체는 서로 형이 다를 수 있는 여러 변수들의 모임을 하나의 이름으로 가지고 있는 자
료구조이다. <br />
구조체는 그 목적에 따라 필요한 구성요소를 정하여 다음과 같이 선언할 수 있다.
    <pre><code class="language-C">struct employee { char name[20]; long id; int depend; float salary;
};
struct employee e1;
</code></pre>
  </li>
</ul>

<pre><code class="language-C">strcpy(e1.name, “HongGilDong");
e1.id = 20071357;
e1.depend = 3;
e1.salary = 345.716;
</code></pre>

<p>이와 같은 선언에 의하여 struct employee라는 데이터 형이 생기게 되는 것이다. <br />
이때 아래와 같이 선언된 변수 e1은 각각 name, id, depend, salary 4개의 변수에 값을 가질 수 있
다.</p>

<h2 id="typedef정의문으로-활용하기">typedef(정의문)으로 활용하기</h2>
<pre><code class="language-C">typedef struct { char name[20]; int age; float salary;
} human_being;
</code></pre>

<p>이런식으로 정의문으로 구조체를 선언하고, 구조체 별칭으로 human_being 으로 만들면,</p>

<p>이후</p>

<pre><code class="language-C">human_being person1, person2;
stycpy(person1.name, "Rhee Hyun-Sook");
peson1.age = 34;
person1.salary = 1575.100;
</code></pre>

<p>이런식으로, 구조체를 활용해 구조체 별칭 human_being 으로 person1, person2 변수를 만들 수 있다.</p>

<blockquote>
  <p>~ 객체지향언어를 공부한 독자라면, 일종의 객체라고 생각해도 이해하는 데는 무방하다.   ~</p>
</blockquote>

<h2 id="구조체를-이용한-파일처리의-예시">구조체를 이용한 파일처리의 예시</h2>

<pre><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#define MAX_CNUM 50

typedef struct course { 
  char courseid[10];
  char tname[20];
  unsigned snum; 
  unsigned roomnum;
} cinform;
main(int argc, char *argv[])
{
  int i=0, dnum;
  char sprof[20];
  unsigned sroomnum;
  cinform cdb[MAX_CNUM];
  FILE *coursedb;
  if ((coursedb = fopen(argv[1], "r")) == NULL) {
printf("데이터 파일을 열 수 없습니다 \n");
exit(1); 
}
while (fscanf(coursedb, "%s %s %u %u", cdb[i].courseid,
  cdb[i].tname, &amp;(cdb[i].snum), &amp;(cdb[i].roomnum)) != EOF)
  i++; 
  dnum = i;
  printf("수강인원이 40명 이상인 강좌 코드 번호를 출력하시오.\n");
  for (i=0; i &lt; dnum; i++) 
    if (cdb[i].snum &gt;= 40) 
      printf("%s\n", cdb[i].courseid);
    printf("검색하고자 하는 교수이름 입력 : ");
    scanf("%s", sprof);
    printf("%s 교수가 강의하는 강좌코드와 강의실 번호를 출력하시오.\n",sprof); 
    for (i=0; i &lt; dnum; i++)
      if (!strcmp(cdb[i].tname, sprof))
      printf("%s\t%u\n", cdb[i].courseid, cdb[i].roomnum);
    printf("검색하고자 하는 강의실 번호 입력 : ");
    scanf("%u", &amp;sroomnum);
    printf("%u 강의실에서 수업하는 강좌코드와 담당교수를 출력하시오.\n", sroomnum);
    for (i=0; i &lt; dnum; i++)
      if (cdb[i].roomnum == sroomnum) 
        printf("%s\t%s\n", cdb[i].courseid, cdb[i].tname);
}
</code></pre>

<p>위와 같이 구조체를 이용해 여러 학생들의 정보를 FILE 로 가져와서 정보를 검색,수정,삭제할 수 있다.</p>

<h2 id="자기참조-구조체를-이용한-연결리스트의-구현">자기참조 구조체를 이용한 연결리스트의 구현</h2>

<p>여러 데이터를 저장할 때 주로 사용하는 배열은 연속된 메모리를 차지하게 되고 최대크기
를 컴파일 시간에 미리 확보하고 있어야 하는 단점이 있다.</p>

<p>연결리스트를 구성하는 하나의 정보 단위를 노드라고 하는 데 각 노드는 저장하려는 데이터
와 다음 노드를 가리키는 포인터 정보를 포함하게 된다.</p>

<p>이를 위하여 구조체의 정의 안에 자신과 같은 구조체로의 포인터 정보
를 포함하는 자기참조 구조체로 표현해야 한다. 자기참조 구조체 형태의 연결리스트의 노드 구조의 간단한 예를 다음과 같이 표현할 수 있다.</p>

<p>```
struct one_node { char data[5]; struct one_node *next;
};</p>]]></content><author><name>Ino</name></author><category term="algorithm" /><category term="C" /><category term="algorithm" /><summary type="html"><![CDATA[구조체를 이용한 파일처리 프로그래밍에 필요한 데이터가 파일로 제공되는 경우 각 파일에는 필요한 필드로 구성된 레코드를 저장하는 경우가 많다. 이렇게 저장된 파일의 데이터를 프로그램에서 사용하려면 구조체를 활용해야한다. 구조체는 서로 형이 다를 수 있는 여러 변수들의 모임을 하나의 이름으로 가지고 있는 자 료구조이다. 구조체는 그 목적에 따라 필요한 구성요소를 정하여 다음과 같이 선언할 수 있다. struct employee { char name[20]; long id; int depend; float salary; }; struct employee e1;]]></summary></entry><entry><title type="html">Stack(스택)for C</title><link href="http://localhost:4000/algorithm/2022/06/13/StackForC.html" rel="alternate" type="text/html" title="Stack(스택)for C" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/06/13/StackForC</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/06/13/StackForC.html"><![CDATA[<h2 id="스택의-정의">스택의 정의</h2>
<ul>
  <li>한쪽 끝(top)에서 삽입과 삭제가 일어나는 선형리스트
LIFO(Last In First Out) 구조</li>
  <li>선형리스트의 긑부분에서만 자료의 입력과 출력이 가능하도록 제한된 자료구조</li>
  <li>마지막 삽입 (Last-In)한 원소는 맨 위에 쌓여 있다가 가장먼저 삭제(First-Out) 된다.
    <blockquote>
      <p>후입선출 구조 (LIFO)</p>
    </blockquote>
  </li>
  <li>스택을 운영하기 위하여 끝 부분(top)에 대한 정보가 필요함.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/95608811/173239877-8cfb6ccb-55de-4376-804e-a2efea200fe4.png" width="800px" /></p>

<blockquote>
  <p>위 그림처럼 끝 부분(top) 에서만 삽입과 삭제가 일어남.</p>
</blockquote>

<h2 id="스택의-연산">스택의 연산</h2>
<ul>
  <li>현재 스택의 상태를 나타내는 변수 top, 데이터를 담을 배열 stack이 필요하다.</li>
</ul>

<p>(1) 삽입  <br />
스택이 full한지 check   <br />
top++, stack[top] = data  <br />
(2) 삭제
스택이 empty인지 check  <br />
데이터 꺼내 사용, top–</p>

<h2 id="수식의-표기법">수식의 표기법</h2>
<p>연산자의 위치에 따라 수식의 표기법을 구분할 수 있다.</p>

<ul>
  <li>
    <p>전위표기법 : 연산자가 피연산자 앞에 오는 표기법</p>
  </li>
  <li>
    <p>중위표기법 : 일상 사용하는 방법</p>
  </li>
  <li>
    <p>후위표기법 : 연산자가 피연산자 뒤에 오는 표기법, 괄호를 사용하지 않아서 컴파일러에서 사용하는 표기법이다.</p>
  </li>
</ul>

<h3 id="중위표기식을-후위표기식으로-변환하는-알고리즘">중위표기식을 후위표기식으로 변환하는 알고리즘</h3>

<p>각 연산자, 피연산자를 하나씩 읽으면서 스택에 저장과 출력이란 2가지 동작을 조합하여 수행함</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">피연산자</code> : 항상 출력</li>
  <li><code class="language-plaintext highlighter-rouge">연산자</code> : 아래 과정을 스택에 저장될 때까지 반복</li>
</ul>

<p>if((새 연산자의 우선순위 &gt; 스택의 top연산자의 우선순위) or (스택이 비었음)) <br />
-&gt;  스택에 저장   <br />
else (top의 연산자를 pop하여 출력)
이후 식을 다 읽었으면 스택에 있는 모든 연산자를 pop 하여 출력</p>

<p>즉, 정리하자면</p>
<ol>
  <li>피연산자를 만나면 그대로 출력한다</li>
  <li>스택이 비어있을 때 만나는 연산자는 무조건 스택에 add한다</li>
  <li>지금 처리하려는 연산자가 스택의 top의 연산자 보다 우선순위가 높으면 스택에 add한다. 아니면 스택의 연산자를 delete하여 출력한다.  <br />
표기식을 끝까지 다 읽으면 스택의 연산자를 delete하여 출력한다.</li>
</ol>

<p>괄호 규칙 추가</p>

<ol>
  <li>왼쪽 괄호는 스택에 들어올 때는 무조건 add 되도록하고, 일단 스택에 들어오면 우선순위가 가장 낮아져서 다음 들어오려는 연산자를 add한다.</li>
  <li>오른쪽 괄호는 왼쪽 괄호가 나올 때까지 스택 안의 모든 연산자를 출력한다.</li>
</ol>

<h3 id="후위표기식의-장점">후위표기식의 장점</h3>
<ul>
  <li>괄호가 없으므로 고려할 사항이 적음</li>
</ul>

<p>중위표기식에서는 연산자의 우선순위 때문에 왼쪽에서 오른쪽으로 연산이 진해되지 않고 괄호를 가지고 있기때문에 컴파일러는 중위표기식에서 후위표기식으로 변경해서 사용한다.</p>

<h3 id="수식-표기방식의-변경-괄호가-없을때">수식 표기방식의 변경 (괄호가 없을때)</h3>
<p><img src="https://user-images.githubusercontent.com/95608811/173298178-0753d0e0-11d0-4d25-b262-c6176579aeae.png" width="800px" /></p>

<h3 id="수식-표기방식의-변경-괄호가-있을때">수식 표기방식의 변경 (괄호가 있을때)</h3>
<p><img src="https://user-images.githubusercontent.com/95608811/173298522-0f500c74-173a-4841-918a-e8ca325940f7.png" width="800px" /></p>

<ul>
  <li>괄호가 있을때는 오른쪽 괄호는 왼쪽 괄호가 나올 때까지 스택 안의 모든 연산자를 출력하면 된다.</li>
</ul>

<h4 id="수식-표기방식의-변경-괄호가-있을때-예제">수식 표기방식의 변경 (괄호가 있을때) 예제</h4>
<p><img src="https://user-images.githubusercontent.com/95608811/173299850-7dc29a00-5e6f-465c-85f2-2a59582d6f96.png" width="800px" /></p>

<p><img src="https://user-images.githubusercontent.com/95608811/173299961-b8be8565-5436-4de2-bcb2-540d5b6cf285.png" width="800px" /></p>

<p><img src="https://user-images.githubusercontent.com/95608811/173300070-c3f78bf4-b45d-4f50-a169-54193525f704.png" width="800px" /></p>

<h2 id="후위표기식의-계산-함수">후위표기식의 계산 함수</h2>

<pre><code class="language-C">int cal(void){
  char symbol;
  int op1,op2,n = 0;
  int top=-1;
  symbol = pexpr[n++];
  
  while(symbol != '\0'){
    if(is_operator(symbol)){
      op2 = delete_stack();
      op1 = delete_stack();
      switch(symbol){
        case '+':add_stack(op1+op2);
          break;
        case '-':add_stack(op1-op2);
          break;
        case '*':add_stack(op1*op2);
          break;
        case '/':add_stack(op1/op2);
          break;
      }
    }
    else
      add_stack(symbol-'0');
    symbol = pexpr[n++];
  }
return delete_stack();
}
</code></pre>]]></content><author><name>Ino</name></author><category term="algorithm" /><category term="C" /><category term="algorithm" /><summary type="html"><![CDATA[스택의 정의 한쪽 끝(top)에서 삽입과 삭제가 일어나는 선형리스트 LIFO(Last In First Out) 구조 선형리스트의 긑부분에서만 자료의 입력과 출력이 가능하도록 제한된 자료구조 마지막 삽입 (Last-In)한 원소는 맨 위에 쌓여 있다가 가장먼저 삭제(First-Out) 된다. 후입선출 구조 (LIFO) 스택을 운영하기 위하여 끝 부분(top)에 대한 정보가 필요함.]]></summary></entry></feed>