<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-16T22:24:53+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">시를 좋아하는 프로그래머</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>AlphateamInho</name></author><entry><title type="html">TodoList for Vue.js</title><link href="http://localhost:4000/web/2022/06/16/VueTodo.html" rel="alternate" type="text/html" title="TodoList for Vue.js" /><published>2022-06-16T00:00:00+09:00</published><updated>2022-06-16T00:00:00+09:00</updated><id>http://localhost:4000/web/2022/06/16/VueTodo</id><content type="html" xml:base="http://localhost:4000/web/2022/06/16/VueTodo.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">set-ExecutionPolicy -ExecutionPolicy Unrestricted</code> : 권한오류    <br />
<code class="language-plaintext highlighter-rouge">npm install -g @vue/cli</code> : vue를 전역에 설치   <br />
<code class="language-plaintext highlighter-rouge">vue create project01</code> : vue 디렉토리 생성    <br />
<code class="language-plaintext highlighter-rouge">vue add router</code> : router 추가 / 처음 vue 만들때 router 옵션 체크</p>

<p><code class="language-plaintext highlighter-rouge">npm run lint</code> : 린트 에러 해결   <br />
<code class="language-plaintext highlighter-rouge">vue add vuetify</code> : vuetify 설치    <br />
<code class="language-plaintext highlighter-rouge">npm run serve</code> : 실시간 미리보기</p>

<ul>
  <li>material designIcon : 아이콘 퍼오기</li>
</ul>
<p><a href="https://materialdesignicons.com/">https://materialdesignicons.com/</a></p>

<h2 id="todo-list만들기">Todo-List만들기</h2>
<h3 id="appvue-코드">App.vue 코드</h3>
<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;v-app</span> <span class="na">id=</span><span class="s">"inspire"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;v-navigation-drawer</span> <span class="na">v-model=</span><span class="s">"drawer"</span> <span class="na">app</span><span class="nt">&gt;</span>
      <span class="nt">&lt;v-list-item&gt;</span>
        <span class="nt">&lt;v-list-item-content&gt;</span>
          <span class="nt">&lt;v-list-item-title</span> <span class="na">class=</span><span class="s">"text-h6"</span><span class="nt">&gt;</span>ToDo List <span class="nt">&lt;/v-list-item-title&gt;</span>
          <span class="nt">&lt;v-list-item-subtitle&gt;</span>Vuetify-Todo<span class="nt">&lt;/v-list-item-subtitle&gt;</span>
        <span class="nt">&lt;/v-list-item-content&gt;</span>
      <span class="nt">&lt;/v-list-item&gt;</span>

      <span class="nt">&lt;v-divider&gt;&lt;/v-divider&gt;</span>

      <span class="nt">&lt;v-list</span> <span class="na">dense</span> <span class="na">nav</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-list-item</span> <span class="na">v-for=</span><span class="s">"a in items"</span> <span class="na">:key=</span><span class="s">"a.title"</span> <span class="na">:to=</span><span class="s">"a.to"</span> <span class="na">link</span><span class="nt">&gt;</span>
          <span class="nt">&lt;v-list-item-icon&gt;</span>
            <span class="nt">&lt;v-icon&gt;&lt;/v-icon&gt;</span>
          <span class="nt">&lt;/v-list-item-icon&gt;</span>

          <span class="nt">&lt;v-list-item-content&gt;</span>
            <span class="nt">&lt;v-list-item-title&gt;&lt;/v-list-item-title&gt;</span>
          <span class="nt">&lt;/v-list-item-content&gt;</span>
        <span class="nt">&lt;/v-list-item&gt;</span>
      <span class="nt">&lt;/v-list&gt;</span>
    <span class="nt">&lt;/v-navigation-drawer&gt;</span>

    <span class="nt">&lt;v-app-bar</span> <span class="na">app</span> <span class="na">color=</span><span class="s">"#fcb69f"</span> <span class="na">dark</span> <span class="na">src=</span><span class="s">"playground.jpg"</span> <span class="na">prominent</span><span class="nt">&gt;</span>
      <span class="nt">&lt;template</span> <span class="na">v-slot:img=</span><span class="s">"</span>{ props }"&gt;
        <span class="nt">&lt;v-img</span>
          <span class="na">v-bind=</span><span class="s">"props"</span>
          <span class="na">gradient=</span><span class="s">"to top right, rgba(19,84,122,.5), rgba(128,208,199,.8)"</span>
        <span class="nt">&gt;&lt;/v-img&gt;</span>
      <span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

      <span class="nt">&lt;v-app-bar-nav-icon</span> <span class="err">@</span><span class="na">click=</span><span class="s">"drawer = !drawer"</span><span class="nt">&gt;&lt;/v-app-bar-nav-icon&gt;</span>

      <span class="nt">&lt;v-app-bar-title&gt;</span>오늘 할일 하기<span class="nt">&lt;/v-app-bar-title&gt;</span>

      <span class="nt">&lt;v-spacer&gt;&lt;/v-spacer&gt;</span>

      <span class="nt">&lt;v-btn</span> <span class="na">icon</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-icon&gt;</span>mdi-magnify<span class="nt">&lt;/v-icon&gt;</span>
      <span class="nt">&lt;/v-btn&gt;</span>

      <span class="nt">&lt;v-btn</span> <span class="na">icon</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-icon&gt;</span>mdi-heart<span class="nt">&lt;/v-icon&gt;</span>
      <span class="nt">&lt;/v-btn&gt;</span>

      <span class="nt">&lt;v-btn</span> <span class="na">icon</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-icon&gt;</span>mdi-dots-vertical<span class="nt">&lt;/v-icon&gt;</span>
      <span class="nt">&lt;/v-btn&gt;</span>
    <span class="nt">&lt;/v-app-bar&gt;</span>

    <span class="nt">&lt;v-main&gt;</span>
      <span class="nt">&lt;router-view&gt;&lt;/router-view&gt;</span>
    <span class="nt">&lt;/v-main&gt;</span>
  <span class="nt">&lt;/v-app&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">drawer</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">items</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Todo</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">icon</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mdi-checkbox-marked-circle-plus-outline</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">to</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">About</span><span class="dl">"</span><span class="p">,</span> <span class="na">icon</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mdi-help-box</span><span class="dl">"</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span> <span class="p">},</span>
    <span class="p">],</span>
    <span class="na">right</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">}),</span>
<span class="p">};</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h3 id="todovue-코드">todo.vue 코드</h3>
<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"home"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;v-text-field</span>
      <span class="na">outlined</span>
      <span class="na">label=</span><span class="s">"해야할일 추가"</span>
      <span class="na">append-icon=</span><span class="s">"mdi-plus-box-multiple-outline"</span>
      <span class="na">class=</span><span class="s">"pa-3"</span>
      <span class="na">hide-details</span>
      <span class="na">clearable</span>
      <span class="na">v-model=</span><span class="s">"newTaskTitle"</span>
      <span class="err">@</span><span class="na">click:append=</span><span class="s">"addTask"</span>
      <span class="err">@</span><span class="na">keyup.enter=</span><span class="s">"addTask"</span>
    <span class="nt">&gt;</span>
    <span class="nt">&lt;/v-text-field&gt;</span>

    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;v-list</span> <span class="na">class=</span><span class="s">"pa-0"</span> <span class="na">flat</span> <span class="na">v-if=</span><span class="s">"tasks.length"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">v-for=</span><span class="s">"(할일, idx) in tasks"</span> <span class="na">:key=</span><span class="s">"idx"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;v-list-item</span>
            <span class="err">@</span><span class="na">click=</span><span class="s">"doneTask(할일.id)"</span>
            <span class="na">:class=</span><span class="s">"</span>{ 'blue lighten-5': 할일.done }"
          &gt;
            <span class="nt">&lt;template&gt;</span>
              <span class="nt">&lt;v-list-item-action&gt;</span>
                <span class="nt">&lt;v-checkbox</span> <span class="na">:input-value=</span><span class="s">"할일.done"</span> <span class="na">color=</span><span class="s">"primary"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;/v-checkbox&gt;</span>
              <span class="nt">&lt;/v-list-item-action&gt;</span>

              <span class="nt">&lt;v-list-item-content&gt;</span>
                <span class="nt">&lt;v-list-item-title</span>
                  <span class="na">:class=</span><span class="s">"</span>{ 'text-decoration-line-through': 할일.done }"
                &gt;
                  
                <span class="nt">&lt;/v-list-item-title&gt;</span>
              <span class="nt">&lt;/v-list-item-content&gt;</span>
              <span class="nt">&lt;v-btn</span> <span class="na">icon</span> <span class="err">@</span><span class="na">click.stop=</span><span class="s">"deleteTask(할일.id)"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;v-icon</span> <span class="na">color=</span><span class="s">"primary lighten-1"</span><span class="nt">&gt;</span>mdi-delete<span class="nt">&lt;/v-icon&gt;</span>
              <span class="nt">&lt;/v-btn&gt;</span>
            <span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>
          <span class="nt">&lt;/v-list-item&gt;</span>
          <span class="nt">&lt;v-divider&gt;&lt;/v-divider&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/v-list&gt;</span>

      <span class="nt">&lt;div</span> <span class="na">v-else</span> <span class="na">class=</span><span class="s">"no-tasks"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;v-icon</span> <span class="na">size=</span><span class="s">"100"</span> <span class="na">color=</span><span class="s">"primary"</span><span class="nt">&gt;</span> mdi-check <span class="nt">&lt;/v-icon&gt;&lt;br</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"text-h5 primary--text"</span><span class="nt">&gt;</span>할일 없냐?<span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ToDo</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">tasks</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">학교 가기</span><span class="dl">"</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">학식 먹기</span><span class="dl">"</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">과제 하기</span><span class="dl">"</span><span class="p">,</span> <span class="na">done</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
      <span class="p">],</span>
      <span class="na">newTaskTitle</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">addTask</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">newTask</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span>
        <span class="na">title</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">newTaskTitle</span><span class="p">,</span>
        <span class="na">done</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">};</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newTask</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">newTaskTitle</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">doneTask</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">할일</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">할일</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">할일</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">id</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
      <span class="nx">할일</span><span class="p">.</span><span class="nx">done</span> <span class="o">=</span> <span class="o">!</span><span class="nx">할일</span><span class="p">.</span><span class="nx">done</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">deleteTask</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">할일</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">할일</span><span class="p">.</span><span class="nx">id</span> <span class="o">!==</span> <span class="nx">id</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">);</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">style</span> <span class="na">lang=</span><span class="s">"sass"</span><span class="nt">&gt;</span>
<span class="nc">.no-tasks</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span>
  <span class="nl">left</span><span class="p">:</span><span class="m">50%</span>
  <span class="nl">top</span><span class="p">:</span><span class="m">50%</span>
  <span class="nl">transform</span><span class="p">:</span> <span class="nf">translate</span><span class="p">(</span><span class="m">-50%</span><span class="o">,-</span><span class="m">50%</span><span class="p">)</span>
  <span class="nl">opacity</span><span class="p">:</span><span class="m">0</span><span class="mi">.6</span>
<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h3 id="indexjs-코드">index.js 코드</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Vue</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">vue</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">VueRouter</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">vue-router</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Todo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../views/ToDo.vue</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueRouter</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">routes</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Todo</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">component</span><span class="p">:</span> <span class="nx">Todo</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/about</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">About</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// route level code-splitting</span>
    <span class="c1">// this generates a separate chunk (about.[hash].js) for this route</span>
    <span class="c1">// which is lazy-loaded when the route is visited.</span>
    <span class="na">component</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span>
      <span class="k">import</span><span class="p">(</span><span class="cm">/* webpackChunkName: "about" */</span> <span class="dl">"</span><span class="s2">../views/AboutView.vue</span><span class="dl">"</span><span class="p">),</span>
  <span class="p">},</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VueRouter</span><span class="p">({</span>
  <span class="nx">routes</span><span class="p">,</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>Ino</name></author><category term="web" /><category term="vue" /><category term="web" /><summary type="html"><![CDATA[set-ExecutionPolicy -ExecutionPolicy Unrestricted : 권한오류 npm install -g @vue/cli : vue를 전역에 설치 vue create project01 : vue 디렉토리 생성 vue add router : router 추가 / 처음 vue 만들때 router 옵션 체크]]></summary></entry><entry><title type="html">Search Tree(트리탐색)for C</title><link href="http://localhost:4000/algorithm/2022/06/14/SearchTreeForC.html" rel="alternate" type="text/html" title="Search Tree(트리탐색)for C" /><published>2022-06-14T00:00:00+09:00</published><updated>2022-06-14T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/06/14/SearchTreeForC</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/06/14/SearchTreeForC.html"><![CDATA[<h2 id="트리검색">트리검색</h2>
<p>탐색을 하기에 가장 적합하고 많이 사용하는 구조가 트리구조이다. 특히 프로그램의 논리는 if 조건문의 참이나 거짓 두 갈래의 선택이 있는 이진구조이므로 이를 반영하여 문제 분석과 설계 단계에서 자연스럽게 이진트리가 자주 사용된다.</p>

<p>이진탐색트리는 공백이 가능한 이진 트리로 공백이 아니면 다음의 성질을 만족한다.</p>

<ol>
  <li>모든 원소는 key를 갖는다.</li>
  <li>공백이 아닌 왼쪽 서브트리의 key들은 그의 루트의 key보다 작아야한다.</li>
  <li>공백이 아닌 오른쪽 서브트리의 key들은 그의 루트의 key보다 커야한다.</li>
  <li>왼쪽과 오른쪽 서브트리도 또한 이진 탐색 트리이다 (재귀적정의)</li>
</ol>

<p>``</p>]]></content><author><name>Ino</name></author><category term="algorithm" /><category term="C" /><category term="algorithm" /><summary type="html"><![CDATA[트리검색 탐색을 하기에 가장 적합하고 많이 사용하는 구조가 트리구조이다. 특히 프로그램의 논리는 if 조건문의 참이나 거짓 두 갈래의 선택이 있는 이진구조이므로 이를 반영하여 문제 분석과 설계 단계에서 자연스럽게 이진트리가 자주 사용된다.]]></summary></entry><entry><title type="html">Stack(스택)for C</title><link href="http://localhost:4000/algorithm/2022/06/13/StackForC.html" rel="alternate" type="text/html" title="Stack(스택)for C" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/06/13/StackForC</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/06/13/StackForC.html"><![CDATA[<h2 id="스택의-정의">스택의 정의</h2>
<ul>
  <li>한쪽 끝(top)에서 삽입과 삭제가 일어나는 선형리스트
LIFO(Last In First Out) 구조</li>
  <li>선형리스트의 긑부분에서만 자료의 입력과 출력이 가능하도록 제한된 자료구조</li>
  <li>마지막 삽입 (Last-In)한 원소는 맨 위에 쌓여 있다가 가장먼저 삭제(First-Out) 된다.
    <blockquote>
      <p>후입선출 구조 (LIFO)</p>
    </blockquote>
  </li>
  <li>스택을 운영하기 위하여 끝 부분(top)에 대한 정보가 필요함.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/95608811/173239877-8cfb6ccb-55de-4376-804e-a2efea200fe4.png" width="800px" /></p>

<blockquote>
  <p>위 그림처럼 끝 부분(top) 에서만 삽입과 삭제가 일어남.</p>
</blockquote>

<h2 id="스택의-연산">스택의 연산</h2>
<ul>
  <li>현재 스택의 상태를 나타내는 변수 top, 데이터를 담을 배열 stack이 필요하다.</li>
</ul>

<p>(1) 삽입  <br />
스택이 full한지 check   <br />
top++, stack[top] = data  <br />
(2) 삭제
스택이 empty인지 check  <br />
데이터 꺼내 사용, top–</p>

<h2 id="수식의-표기법">수식의 표기법</h2>
<p>연산자의 위치에 따라 수식의 표기법을 구분할 수 있다.</p>

<ul>
  <li>
    <p>전위표기법 : 연산자가 피연산자 앞에 오는 표기법</p>
  </li>
  <li>
    <p>중위표기법 : 일상 사용하는 방법</p>
  </li>
  <li>
    <p>후위표기법 : 연산자가 피연산자 뒤에 오는 표기법, 괄호를 사용하지 않아서 컴파일러에서 사용하는 표기법이다.</p>
  </li>
</ul>

<h3 id="중위표기식을-후위표기식으로-변환하는-알고리즘">중위표기식을 후위표기식으로 변환하는 알고리즘</h3>

<p>각 연산자, 피연산자를 하나씩 읽으면서 스택에 저장과 출력이란 2가지 동작을 조합하여 수행함</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">피연산자</code> : 항상 출력</li>
  <li><code class="language-plaintext highlighter-rouge">연산자</code> : 아래 과정을 스택에 저장될 때까지 반복</li>
</ul>

<p>if((새 연산자의 우선순위 &gt; 스택의 top연산자의 우선순위) or (스택이 비었음)) <br />
-&gt;  스택에 저장   <br />
else (top의 연산자를 pop하여 출력)
이후 식을 다 읽었으면 스택에 있는 모든 연산자를 pop 하여 출력</p>

<p>즉, 정리하자면</p>
<ol>
  <li>피연산자를 만나면 그대로 출력한다</li>
  <li>스택이 비어있을 때 만나는 연산자는 무조건 스택에 add한다</li>
  <li>지금 처리하려는 연산자가 스택의 top의 연산자 보다 우선순위가 높으면 스택에 add한다. 아니면 스택의 연산자를 delete하여 출력한다.  <br />
표기식을 끝까지 다 읽으면 스택의 연산자를 delete하여 출력한다.</li>
</ol>

<p>괄호 규칙 추가</p>

<ol>
  <li>왼쪽 괄호는 스택에 들어올 때는 무조건 add 되도록하고, 일단 스택에 들어오면 우선순위가 가장 낮아져서 다음 들어오려는 연산자를 add한다.</li>
  <li>오른쪽 괄호는 왼쪽 괄호가 나올 때까지 스택 안의 모든 연산자를 출력한다.</li>
</ol>

<h3 id="후위표기식의-장점">후위표기식의 장점</h3>
<ul>
  <li>괄호가 없으므로 고려할 사항이 적음</li>
</ul>

<p>중위표기식에서는 연산자의 우선순위 때문에 왼쪽에서 오른쪽으로 연산이 진해되지 않고 괄호를 가지고 있기때문에 컴파일러는 중위표기식에서 후위표기식으로 변경해서 사용한다.</p>

<h3 id="수식-표기방식의-변경-괄호가-없을때">수식 표기방식의 변경 (괄호가 없을때)</h3>
<p><img src="https://user-images.githubusercontent.com/95608811/173298178-0753d0e0-11d0-4d25-b262-c6176579aeae.png" width="800px" /></p>

<h3 id="수식-표기방식의-변경-괄호가-있을때">수식 표기방식의 변경 (괄호가 있을때)</h3>
<p><img src="https://user-images.githubusercontent.com/95608811/173298522-0f500c74-173a-4841-918a-e8ca325940f7.png" width="800px" /></p>

<ul>
  <li>괄호가 있을때는 오른쪽 괄호는 왼쪽 괄호가 나올 때까지 스택 안의 모든 연산자를 출력하면 된다.</li>
</ul>

<h4 id="수식-표기방식의-변경-괄호가-있을때-예제">수식 표기방식의 변경 (괄호가 있을때) 예제</h4>
<p><img src="https://user-images.githubusercontent.com/95608811/173299850-7dc29a00-5e6f-465c-85f2-2a59582d6f96.png" width="800px" /></p>

<p><img src="https://user-images.githubusercontent.com/95608811/173299961-b8be8565-5436-4de2-bcb2-540d5b6cf285.png" width="800px" /></p>

<p><img src="https://user-images.githubusercontent.com/95608811/173300070-c3f78bf4-b45d-4f50-a169-54193525f704.png" width="800px" /></p>

<h2 id="후위표기식의-계산-함수">후위표기식의 계산 함수</h2>

<pre><code class="language-C">int cal(void){
  char symbol;
  int op1,op2,n = 0;
  int top=-1;
  symbol = pexpr[n++];
  
  while(symbol != '\0'){
    if(is_operator(symbol)){
      op2 = delete_stack();
      op1 = delete_stack();
      switch(symbol){
        case '+':add_stack(op1+op2);
          break;
        case '-':add_stack(op1-op2);
          break;
        case '*':add_stack(op1*op2);
          break;
        case '/':add_stack(op1/op2);
          break;
      }
    }
    else
      add_stack(symbol-'0');
    symbol = pexpr[n++];
  }
return delete_stack();
}
</code></pre>]]></content><author><name>Ino</name></author><category term="algorithm" /><category term="C" /><category term="algorithm" /><summary type="html"><![CDATA[스택의 정의 한쪽 끝(top)에서 삽입과 삭제가 일어나는 선형리스트 LIFO(Last In First Out) 구조 선형리스트의 긑부분에서만 자료의 입력과 출력이 가능하도록 제한된 자료구조 마지막 삽입 (Last-In)한 원소는 맨 위에 쌓여 있다가 가장먼저 삭제(First-Out) 된다. 후입선출 구조 (LIFO) 스택을 운영하기 위하여 끝 부분(top)에 대한 정보가 필요함.]]></summary></entry><entry><title type="html">구조체 for C</title><link href="http://localhost:4000/algorithm/2022/06/13/%EA%B5%AC%EC%A1%B0%EC%B2%B4forC.html" rel="alternate" type="text/html" title="구조체 for C" /><published>2022-06-13T00:00:00+09:00</published><updated>2022-06-13T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/06/13/%EA%B5%AC%EC%A1%B0%EC%B2%B4forC</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/06/13/%EA%B5%AC%EC%A1%B0%EC%B2%B4forC.html"><![CDATA[<h2 id="구조체를-이용한-파일처리">구조체를 이용한 파일처리</h2>
<p>프로그래밍에 필요한 데이터가 파일로 제공되는 경우 각 파일에는 필요한 필드로 구성된
레코드를 저장하는 경우가 많다. 이렇게 저장된 파일의 데이터를 프로그램에서 사용하려면
구조체를 활용해야한다.</p>
<ul>
  <li>구조체는 서로 형이 다를 수 있는 여러 변수들의 모임을 하나의 이름으로 가지고 있는 자
료구조이다. <br />
구조체는 그 목적에 따라 필요한 구성요소를 정하여 다음과 같이 선언할 수 있다.
    <pre><code class="language-C">struct employee { char name[20]; long id; int depend; float salary;
};
struct employee e1;
</code></pre>
  </li>
</ul>

<pre><code class="language-C">strcpy(e1.name, “HongGilDong");
e1.id = 20071357;
e1.depend = 3;
e1.salary = 345.716;
</code></pre>

<p>이와 같은 선언에 의하여 struct employee라는 데이터 형이 생기게 되는 것이다. <br />
이때 아래와 같이 선언된 변수 e1은 각각 name, id, depend, salary 4개의 변수에 값을 가질 수 있
다.</p>

<h2 id="typedef정의문으로-활용하기">typedef(정의문)으로 활용하기</h2>
<pre><code class="language-C">typedef struct { char name[20]; int age; float salary;
} human_being;
</code></pre>

<p>이런식으로 정의문으로 구조체를 선언하고, 구조체 별칭으로 human_being 으로 만들면,</p>

<p>이후</p>

<pre><code class="language-C">human_being person1, person2;
stycpy(person1.name, "Rhee Hyun-Sook");
peson1.age = 34;
person1.salary = 1575.100;
</code></pre>

<p>이런식으로, 구조체를 활용해 구조체 별칭 human_being 으로 person1, person2 변수를 만들 수 있다.</p>

<blockquote>
  <p>~ 객체지향언어를 공부한 독자라면, 일종의 객체라고 생각해도 이해하는 데는 무방하다.   ~</p>
</blockquote>

<h2 id="구조체를-이용한-파일처리의-예시">구조체를 이용한 파일처리의 예시</h2>

<pre><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#define MAX_CNUM 50

typedef struct course { 
  char courseid[10];
  char tname[20];
  unsigned snum; 
  unsigned roomnum;
} cinform;
main(int argc, char *argv[])
{
  int i=0, dnum;
  char sprof[20];
  unsigned sroomnum;
  cinform cdb[MAX_CNUM];
  FILE *coursedb;
  if ((coursedb = fopen(argv[1], "r")) == NULL) {
printf("데이터 파일을 열 수 없습니다 \n");
exit(1); 
}
while (fscanf(coursedb, "%s %s %u %u", cdb[i].courseid,
  cdb[i].tname, &amp;(cdb[i].snum), &amp;(cdb[i].roomnum)) != EOF)
  i++; 
  dnum = i;
  printf("수강인원이 40명 이상인 강좌 코드 번호를 출력하시오.\n");
  for (i=0; i &lt; dnum; i++) 
    if (cdb[i].snum &gt;= 40) 
      printf("%s\n", cdb[i].courseid);
    printf("검색하고자 하는 교수이름 입력 : ");
    scanf("%s", sprof);
    printf("%s 교수가 강의하는 강좌코드와 강의실 번호를 출력하시오.\n",sprof); 
    for (i=0; i &lt; dnum; i++)
      if (!strcmp(cdb[i].tname, sprof))
      printf("%s\t%u\n", cdb[i].courseid, cdb[i].roomnum);
    printf("검색하고자 하는 강의실 번호 입력 : ");
    scanf("%u", &amp;sroomnum);
    printf("%u 강의실에서 수업하는 강좌코드와 담당교수를 출력하시오.\n", sroomnum);
    for (i=0; i &lt; dnum; i++)
      if (cdb[i].roomnum == sroomnum) 
        printf("%s\t%s\n", cdb[i].courseid, cdb[i].tname);
}
</code></pre>

<p>위와 같이 구조체를 이용해 여러 학생들의 정보를 FILE 로 가져와서 정보를 검색,수정,삭제할 수 있다.</p>

<h2 id="자기참조-구조체를-이용한-연결리스트의-구현">자기참조 구조체를 이용한 연결리스트의 구현</h2>

<p>여러 데이터를 저장할 때 주로 사용하는 배열은 연속된 메모리를 차지하게 되고 최대크기
를 컴파일 시간에 미리 확보하고 있어야 하는 단점이 있다.</p>

<p>연결리스트를 구성하는 하나의 정보 단위를 노드라고 하는 데 각 노드는 저장하려는 데이터
와 다음 노드를 가리키는 포인터 정보를 포함하게 된다.</p>

<p>이를 위하여 구조체의 정의 안에 자신과 같은 구조체로의 포인터 정보
를 포함하는 자기참조 구조체로 표현해야 한다. 자기참조 구조체 형태의 연결리스트의 노드 구조의 간단한 예를 다음과 같이 표현할 수 있다.</p>

<p>```
struct one_node { char data[5]; struct one_node *next;
};</p>]]></content><author><name>Ino</name></author><category term="algorithm" /><category term="C" /><category term="algorithm" /><summary type="html"><![CDATA[구조체를 이용한 파일처리 프로그래밍에 필요한 데이터가 파일로 제공되는 경우 각 파일에는 필요한 필드로 구성된 레코드를 저장하는 경우가 많다. 이렇게 저장된 파일의 데이터를 프로그램에서 사용하려면 구조체를 활용해야한다. 구조체는 서로 형이 다를 수 있는 여러 변수들의 모임을 하나의 이름으로 가지고 있는 자 료구조이다. 구조체는 그 목적에 따라 필요한 구성요소를 정하여 다음과 같이 선언할 수 있다. struct employee { char name[20]; long id; int depend; float salary; }; struct employee e1;]]></summary></entry><entry><title type="html">MagicSquare(마방진)for C</title><link href="http://localhost:4000/algorithm/2022/06/12/%EB%A7%88%EB%B0%A9%EC%A7%84forC.html" rel="alternate" type="text/html" title="MagicSquare(마방진)for C" /><published>2022-06-12T00:00:00+09:00</published><updated>2022-06-12T00:00:00+09:00</updated><id>http://localhost:4000/algorithm/2022/06/12/%EB%A7%88%EB%B0%A9%EC%A7%84forC</id><content type="html" xml:base="http://localhost:4000/algorithm/2022/06/12/%EB%A7%88%EB%B0%A9%EC%A7%84forC.html"><![CDATA[<h2 id="마방진">마방진</h2>

<p>우선 마방진에 대한 개념은 가로,세로,대각선의 합이 같아지도록 정사각형 모양으로 배열한 행렬이다.</p>

<h4 id="마방진-만드는-규칙">마방진 만드는 규칙</h4>
<p>1) 첫번째 행의 중앙에 1을 배열한다.   <br />
2) 왼쪽 대각선으로 올라가면서 빈자리에 1씩 큰 수를 배열한다.  <br />
이때 행렬의 밖으로 벗어나면 그 방향의 반대편에서 계속한다.  <br />
3) 만약 이동해서 채워야하는 자리에 이미 숫자가 배열되어 있다면, 정해진 위치 바로 아래에 숫자를 배열한다.</p>
<blockquote>
  <p>5x5 마방진 예시</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/95608811/173228247-33159117-d629-4c6b-8d1f-d9178874049c.png" width="800px" /></p>

<h4 id="규칙을-프로그램으로-짜기">규칙을 프로그램으로 짜기</h4>

<ul>
  <li>입력 : 0으로 초기화된 n * n의 2차원 배열 <code class="language-plaintext highlighter-rouge">table[n][n]</code></li>
  <li>출력 : n * n의 magic square</li>
</ul>

<p>행을 움직이는 변수 i, 열을 움직이는 변수 j</p>

<p>1) Rule : 첫 번째 행의 중앙에 1을 놓는다.</p>
<pre><code class="language-C">int i = 0, int j = (n-1)/2 ,
table[i][j] = 1;
</code></pre>

<p>2) Rule : 왼쪽 대각선 방향으로 올라가면서 빈자리에 1씩 큰 수를 놓는다. 이때 행렬의 밖으로 벗어나면 그 방향의 반대편에서 계속한다.</p>

<p>3) Rule : 만약 이동하려는 자리에 숫자가 이미 채워져 있으면 지금 위치의 바로 아래에 숫자를 놓는다.</p>

<pre><code class="language-C">#define MAX_SIZE 15   

//마방진의 최대 사이즈를 15로 설정
void make_msquare(int table[][MAX_SIZE], int n);
// 마방진 구현하는 함수
void display(int table[][MAX_SIZE], int n);
// 구현한 마방진을 print 해서 보여주는 함수

int main() {
	int n, r, c, sum = 0;
	int table[MAX_SIZE][MAX_SIZE];

	printf("Enter a number: ");
	scanf("%d", &amp;n);

	if ((n &lt; 1) || n &gt; MAX_SIZE) {
		printf("Error! size is out of range \n");
		exit(0);
	}
	for (r = 0; r &lt; n; r++) {
		for (c = 0; c &lt; n; c++) {
			table[r][c] = 0;
		}
	}
  // 마방진의 배열을 전부 0으로 초기화시켜줌
	make_msquare(table,n);
	display(table, n);

}

void make_msquare(int table[][MAX_SIZE], int n) {
	int digit = 0;
	int row, r, c, col;

	r = 0; c = (n - 1) / 2;
  // 행의 첫번째줄, 열의 중간부터 마방진을 시작한다.
	table[r][c] = 1;

	for (digit = 2; digit &lt;= n * n; digit++) {
		row = r - 1;
		col = c - 1;
    // 왼쪽 대각선 위로 올라가면서 수를 채울거라,
    행과 열을 하나씩 빼준다.

		if (row &lt; 0) {
			row = n - 1;
		}
    // 행이 0보다 작으면 즉, 가장 위에 열에서 더이상 올라갈 데가 없으면 n-1번째 (가장 아래)에서 다시 시작한다
		if (col &lt; 0) {
			col = n - 1;
		}
    // 열이 0보다 작으면 즉, 가장 왼쪽에서 더 왼쪽으로 갈 데가 없으면 n-1번째 (가장 오른쪽)에서 다시 시작한다
		if (table[row][col]) r++;
		else {
			r = row;
			c = col;
		}
		table[r][c] = digit;
    // 반복되는 횟수에 따라서 그 해당 테이블의 배열에 값을 넣어준다.
	}
}

void display(int table[][MAX_SIZE], int n) {
	int r, c;
	int sum = 0;

	for (r = 0; r &lt; n; r++) {
		for (c = 0; c &lt; n; c++)
			printf("%5d", table[r][c]);
		printf("\n");
	}
	for (c = 0; c &lt; n; c++) {
		sum += table[0][c];
	}
  // 한 열의 number을 카운팅해서 한 열/헹/대각선의 Sum을 구함
	printf("Row/Col/Diagonal Sum = %d \n ", sum);
}
</code></pre>

<p><img src="https://user-images.githubusercontent.com/95608811/173526315-b66b2a84-0cad-4b1d-95eb-1ff8eadfb649.png" width="800px" /></p>

<p>실제 위 코드를 동작시키면 이와 같이 출력된다.</p>]]></content><author><name>Ino</name></author><category term="algorithm" /><category term="C" /><category term="algorithm" /><summary type="html"><![CDATA[마방진]]></summary></entry><entry><title type="html">SQL문제</title><link href="http://localhost:4000/db/2022/06/12/SQL%EB%AC%B8%EC%A0%9C.html" rel="alternate" type="text/html" title="SQL문제" /><published>2022-06-12T00:00:00+09:00</published><updated>2022-06-12T00:00:00+09:00</updated><id>http://localhost:4000/db/2022/06/12/SQL%EB%AC%B8%EC%A0%9C</id><content type="html" xml:base="http://localhost:4000/db/2022/06/12/SQL%EB%AC%B8%EC%A0%9C.html"><![CDATA[<h2 id="sql-문법-순서">SQL 문법 순서</h2>

<p>SELECT(마지막)  무엇을 불러올건지 <br />
FROM (1) 어디서 <br />
WHERE (2) 조건문  <br />
GROUP(3) 그룹별 <br />
HAVING(4) 가져온것 중에서 조건문  <br />
ORDER BY(5) 정렬</p>

<p>순서로 작성하면 된다.</p>

<h2 id="sql-문제">SQL 문제</h2>

<p><img src="https://user-images.githubusercontent.com/95608811/173223493-4b33e677-66ff-4ae8-9cd1-cf306f69909f.png" width="600px" /></p>

<p>1) 급여가 400 이상인 사원 이름과 그 사원이 속한 부서이름을 검색하라</p>
<pre><code class="language-SQL">SELECT  ename, dname

FROM    dept, emp

WHERE   dept.deptid = emp.deptid

AND   salary &gt;= 400;
</code></pre>
<p>​</p>

<p>2) ‘영업부’ 와’구매부’ 사원의 급여 합계를 검색하라</p>

<pre><code class="language-SQL">SELECT  SUM(salary)

FROM    dept, emp

WHERE   dept.deptid = emp.deptid

AND   dname IN ('영업부','구매부');
</code></pre>

<p>​</p>

<p>3) 가장 급여를 많이 받는 사원과 가장 적게 받는 사원의 급여액 차이는 얼마인지 검색하라</p>

<pre><code class="language-SQL">SELECT  MAX(salary) - MIN(salary)

FROM    emp;
</code></pre>
<p>​</p>

<p>4) ‘영업’ 사원 중 급여가 380 이상인 사원 이름, 담당업무, 급여액을 검색하라</p>

<pre><code class="language-SQL">SELECT  ename, job, salary

FROM    dept, emp

WHERE   dept.deptid = emp.deptid

AND   dname = '영업부'

AND   salary &gt;= 380;
</code></pre>

<blockquote>
  <p>문자열검색 %  (0개이상)
_ (1개문자열)</p>
</blockquote>

<p>1) 장르가 코미디 이거나 드라마 인 영화제목, 장르를 검색하라(IN 사용)</p>

<pre><code class="language-SQL">--1번문제
SELECT 영화제목, 장르
FROM 영화
WHERE 장르 IN ('코미디','드라마');
</code></pre>

<p>2) 장르별 상영시간이 가장 긴 영화를 검색해라</p>
<pre><code class="language-SQL">--2번문제
SELECT 장르,MAX(상영시간)
FROM 영화
GROUP BY 장르;
</code></pre>
<p>3) 영화제목에 아저씨라는 단어가 들어가는 모든정보를 검색해라</p>
<pre><code class="language-SQL">--3번문제
SELECT *
FROM 영화
WHERE 영화제목 LIKE '%아저씨%';

( %abc%  &gt;&gt; abc 앞뒤에 어떤문자열이 있든 상관없음 abc를 포함하고 있는것을 찾음.)
(like 는 = 이 아니라, 사전식으로 찾음 그래서 남발하면 속도가 느려짐)
</code></pre>

<p>4) 배우가 남자인 배우번호,이름을 검색하여 배우이름별로 오름차순 정렬해라</p>
<pre><code class="language-SQL">--4번문제
SELECT 배우번호,배우이름
FROM 배우
WHERE 성별 = '남'
ORDER BY 배우이름 ASC;

(order by 배우이름 asc =&gt; 배우이름을 오름차순으로 정렬 des는 내림차순으로 정렬)
</code></pre>

<p>5) 출연료가 500만원 이상,1000만원 이하인 영화코드,배우번호,출연료를 검색해라</p>
<pre><code class="language-SQL">--5번문제
SELECT 영화코드,배우번호,출연료
FROM 출연
WHERE 출연료 &gt;= 500 AND 출연료 &lt;= 1000;

WHERE 출연료 BETWEEN 500 AND  1000;
</code></pre>

<pre><code class="language-SQL">--6번문제
다음 SQL문법의 실행결과를 작성하고 간략히 설명
SELECT COUNT(장르),COUNT(DISTRICT 장르)
FROM 영화;
</code></pre>
<blockquote>
  <p>4,2 / DISTRICT은 결과값 중복제거</p>
</blockquote>

<p>7) 차태현이 출현한 영화의 출연료를 검색해라</p>
<pre><code class="language-SQL">--7번문제
SELECT 출연료
FROM 배우,출연
WHERE 배우,배우번호 = 출연.배우번호
AND 배우이름 = '차태현';

SELECT 출연료
FROM 배우 INNER JOIN 출연
ON 배우.배우번호 = 츌연.배우번호
WEHRE 배우이름 ='차태현';
</code></pre>

<p>8) 영화 ‘키다리아저씨’를 장르는 스릴러, 관림기준은 15로 수정해라</p>
<pre><code class="language-SQL">--8번문제
UPDATE 영화
SET 장르 ='스릴러',관람기준 = 15
WHERE 영화제목 = '키다리아저씨';
</code></pre>]]></content><author><name>Ino</name></author><category term="DB" /><category term="DB" /><category term="SQL" /><summary type="html"><![CDATA[SQL 문법 순서]]></summary></entry><entry><title type="html">SQL기본문법</title><link href="http://localhost:4000/db/2022/06/12/SQL%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95.html" rel="alternate" type="text/html" title="SQL기본문법" /><published>2022-06-12T00:00:00+09:00</published><updated>2022-06-12T00:00:00+09:00</updated><id>http://localhost:4000/db/2022/06/12/SQL%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/db/2022/06/12/SQL%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95.html"><![CDATA[<h2 id="select-기능">SELECT 기능</h2>

<ul>
  <li>내가 원하는 정보 가져오기</li>
</ul>

<p>1) 테이블 전체 정보 보기</p>
<pre><code class="language-SQL">SELECT * FROM Customers;
</code></pre>

<blockquote>
  <p>*(asterisk)는 테이블의 모든 컬럼을 뜻한다.</p>
</blockquote>

<hr />

<p>2) 원하는 컬럼만 보기</p>
<pre><code class="language-SQL">SELECT CustomerName FROM Customers;
</code></pre>
<pre><code class="language-SQL">SELECT CustomerName, ContactName, Country
FROM Customers;
</code></pre>

<hr />

<p>3) 원하는 조건의 row(행)만 걸러서 보기</p>

<ul>
  <li>WHERE 구문 뒤에 조건을 붙여 원하는 데이터만 가져올 수 있습니다.</li>
</ul>

<pre><code class="language-SQL">SELECT * FROM Orders
WHERE EmployeeID = 3;
</code></pre>

<pre><code class="language-SQL">SELECT * FROM OrderDetails
WHERE Quantity &lt; 5;
</code></pre>

<hr />

<p>4) 원하는 순서로 데이터 가져오기</p>

<ul>
  <li>ORDER BY 구문을 사용해서 특정 컬럼을 기준으로 데이터를 정렬할 수 있습니다.</li>
</ul>

<pre><code class="language-SQL">구문	 기준	  기본    
ASC	오름차순  [x]
DESC	내림차순 []
</code></pre>

<pre><code class="language-SQL">SELECT * FROM Customers
ORDER BY ContactName;
</code></pre>

<pre><code class="language-SQL">SELECT * FROM OrderDetails
ORDER BY ProductID ASC, Quantity DESC;
</code></pre>
<hr />

<h2 id="sql-기본연산자">SQL 기본연산자</h2>

<pre><code class="language-SQL">연산자	의미
AND, &amp;&amp;	양쪽이 모두 TRUE일 때만 TRUE
OR, ||	한쪽은 TRUE면 TRUE
</code></pre>

<pre><code class="language-SQL">SELECT * FROM Orders
WHERE
  CustomerId = 15 AND EmployeeId = 4;
</code></pre>

<pre><code class="language-OPERATOR">연산자	의미
=	양쪽 값이 같음
!=, &lt;&gt;	양쪽 값이 다름
&gt;, &lt;	(왼쪽, 오른쪽) 값이 더 큼
&gt;=, &lt;=	(왼쪽, 오른쪽) 값이 같거나 더 큼
</code></pre>

<pre><code class="language-BETWEEN">연산자	의미
BETWEEN {MIN} AND {MAX}	두 값 사이에 있음
NOT BETWEEN {MIN} AND {MAX}	두 값 사이가 아닌 곳에 있음
</code></pre>

<h3 id="총정리">총정리</h3>

<pre><code class="language-GRAMMER">연산자	의미
+, -, *, /	각각 더하기, 빼기, 곱하기, 나누기
%, MOD	나머지
IS	양쪽이 모두 TRUE 또는 FALSE
IS NOT	한쪽은 TRUE, 한쪽은 FALSE
AND, &amp;&amp;	양쪽이 모두 TRUE일 때만 TRUE
OR, ||	한쪽은 TRUE면 TRUE
=	양쪽 값이 같음
!=, &lt;&gt;	양쪽 값이 다름
&gt;, &lt;	(왼쪽, 오른쪽) 값이 더 큼
&gt;=, &lt;=	(왼쪽, 오른쪽) 값이 같거나 더 큼
BETWEEN {MIN} AND {MAX}	두 값 사이에 있음
NOT BETWEEN {MIN} AND {MAX}	두 값 사이가 아닌 곳에 있음
IN (...)	괄호 안의 값들 가운데 있음
NOT IN (...)	괄호 안의 값들 가운데 없음
LIKE '... % ...'	0~N개 문자를 가진 패턴
LIKE '... _ ...'	_ 갯수만큼의 문자를 가진 패턴
</code></pre>

<h3 id="트랜잭션">트랜잭션</h3>

<ul>
  <li>트랜잭션 필요성</li>
</ul>

<ol>
  <li>
    <p>트랜잭션은 ‘거래’라는 뜻으로, 은행에서 입금과 출금을 하는 그 거래를 뜻한다.</p>
  </li>
  <li>
    <p>A 은행에서 출금하여 B은행으로 송금한다고 가정하자.</p>
  </li>
  <li>
    <p>송금한느 중에 알 수 없는 오류가 발생하여 A은행 계좌에서 돈이 빠져 나갔는데 B은행 계좌에 입금되지 않았다.</p>
  </li>
  <li>
    <p>이때, 우리는 A은행 계좌의 출금을 취소하거나, 출금된 금액만큼 B은행 계좌로 다시 송금하면 된다.</p>
  </li>
  <li>
    <p>하지만 이 방법은 번거롭고 더 심한 오류를 발생시킬수 있다.</p>
  </li>
  <li>
    <p>그래서 생각해낸 해결책이, 거래가 성공적으로 모두 끝난 후에야 이를 완전한 거래로 승인하고, 거래 도중 뭔가 오류가 발생했을 때는 이 거래를 아예 처음부터 없었던 거래로 되돌리는 것이다.</p>
  </li>
  <li>
    <p>이렇게 거래의 안전성을 확보하는 방법이 트랜잭션이다.</p>
  </li>
  <li>
    <p>데이터베이스에선 테이블에서 데이터를 읽어 온 후 다른 테이블에 데이터를 입력하거나 갱신, 삭제하는데 처리 도중 오류가 발생하면 모든 작업을 원상태로 되돌린다.</p>
  </li>
  <li>
    <p>데이터베이스에선 처리 과정이 모두 성공했을 때만 최종적으로 데이터베이스에 반영한다.</p>
  </li>
</ol>

<ul>
  <li>트랜잭션 4가지 특성 (ACID)</li>
</ul>

<p>1) 원자성 Atomicity - 트랜잭션에서 정의된 연산들은 모두 성공적으로 실행되던지 아니면 전혀 실행되지 않은 상태로 남아 있어야한다. (all or nothing)  <br />
2) 일관성 Consistency - 트랜잭션이 실행되기 전의 데이터베이스 내용이 잘못 되어 있지 않다면 트랜잭션이 실행된 이후에도 데이터베이스의 내용에 잘못이 있으면 안된다. <br />
3) 고립성 Isolation - 트랜잭션이 실행되는 도중에 다른 트랜잭션의 영향을 받아 잘못된 결과를 만들어서는 안된다. <br />
4) 지속성 Durability - 트랜잭션이 성공적으로 수행되면 그 트랜잭션의 갱신한 데이터베이스의 내용은 영구적으로 저장된다.</p>]]></content><author><name>Ino</name></author><category term="DB" /><category term="DB" /><category term="SQL" /><summary type="html"><![CDATA[SELECT 기능]]></summary></entry><entry><title type="html">DB 정규화</title><link href="http://localhost:4000/db/2022/06/11/DB%EC%A0%95%EA%B7%9C%ED%99%94.html" rel="alternate" type="text/html" title="DB 정규화" /><published>2022-06-11T00:00:00+09:00</published><updated>2022-06-11T00:00:00+09:00</updated><id>http://localhost:4000/db/2022/06/11/DB%EC%A0%95%EA%B7%9C%ED%99%94</id><content type="html" xml:base="http://localhost:4000/db/2022/06/11/DB%EC%A0%95%EA%B7%9C%ED%99%94.html"><![CDATA[<h2 id="정규화-">정규화 ?</h2>

<ul>
  <li>
    <p>DB시스템을 만지다보면 엄청나게 많은 테이블들이 얽혀있어 하나의 데이터를 수정했을때 여러문제가 생길 수 있는데,
정규화를 통해서 정해진 규칙대로 테이블을 쪼개게 되면, 문제점들을 사전에 해소할 수 있음.</p>
  </li>
  <li>
    <p>가장 대표적인 문제점들로는 삭제이상(delete), 삽입이상(insert), 수정이상(update)</p>
  </li>
  <li>삭제이상은 지정된 테이블에서 데이터를 삭제하려고 하는데, 연결된 다른테이블에서도 데이터가 삭제되는 것이다.</li>
  <li>삽입이상은 지정된 테이블에 데이터를 삽입하려고 하는데, 연결된 다른테이블에서도 데이터가 삽입되는 것이다.</li>
  <li>수정이상은 원하는 데이터를 모두 수정하지 못하고, 일부 데이터만 수정되는 것이다.</li>
</ul>

<p>이러한 문제점들을 해소하기 위해서 테이블을 쪼개는 것이다.</p>

<h2 id="제1정규화">제1정규화</h2>

<ol>
  <li>어떤 Relation에 속한 모든 Domain이 원자값만으로 되어 있다.</li>
  <li>모든 attribute에 반복되는 그룹이 나타나지 않는다</li>
  <li>기본키를 사용하여 관련 데이터의 각 집합을 고유하게 식별할 수 있어야한다.</li>
</ol>

<blockquote>
  <p>릴레이션 = 테이블 = 앤티티 = 개체   <br />
행 = row = 레코드 = 투플  <br />
열 = 컬럼 = 필드 = 속성 = 어트리뷰트  <br />
원자값 (atomic value) : 더 이상 쪼갤 수 없는 값</p>
</blockquote>

<ul>
  <li>
    <p>1번은 그냥 한개의 릴레이션에 여러개의 값이 들어가면 안된다는 것이다.  <br />
ex ) 취미 : 등산, 골프  » 이러면 안된다는 것이다.</p>
  </li>
  <li>
    <p>2번은 위와같이 한개의 Relation에 여러개의 값이 들어가는 것을 막기위해 같은 그룹을 여러 개 만드는것이다.
ex ) 취미1 : 등산, 취미2 : 골프 » 이러면 1번을 안하려고 억지로 릴레이션을 분리하는것이니깐 정규화 하는 의미가 없다.</p>
  </li>
  <li>
    <p>3번은 1번,2번 case를 막기위해 <br />
내취미 : 등산, 내취미 : 골프  <br />
이런식으로 같은 릴레이션을 만들어 관련 데이터를 고유하게 식별하지 못하게 하면 안된다는 것이다.</p>
  </li>
  <li>사실 그냥 반복그룹을 제거하되 그괴정에서 의미가 없는 방식으로 제거하지 말라는 것이다.</li>
  <li>왜 정규화 하는지를 생각하면 제1정규화는 <code class="language-plaintext highlighter-rouge">반복그룹제거</code> 하나로 방식을 통일할 수 있다.</li>
</ul>

<h2 id="제2정규화">제2정규화</h2>

<ul>
  <li>제2 정규화를 수행 했을 경우 테이블의 모든 컬럼이 완전 함수적 종속을 만족한다.
    <blockquote>
      <p>부분 함수적 종속을 모두 제거했다는 뜻이다.</p>
    </blockquote>
  </li>
  <li>함수적 종속 : x값에 따라 y값이 결정될 때 x-&gt;y로 표현하는데, 이를 y는 x에 대해 수적 종속이라고 한다. <br />
예를들어 학번을 알면 이름을 알 수 있는데, 이 경우엔 학번이 x가 되고 이름이 y가 된다.  <br />
x를 결정자라고 하고, y를 종속자라고 한다. <br />
즉 다시말해서, x가 바뀌었을 경우 y가 바뀌어야만 한다는 것이다.</li>
</ul>

<p>함수적 종속에서 x의 값이 여러 요소일 경우, 즉 {x1,x2} -&gt; y 일 경우, x1과 x2가 y의 값을 결정할 때 이를 완전 함수적 종속이라고 하고, x1,x2 중 하나만 y의 값을 결정할 때 이를 부분 함수적 종속이라고 한다.</p>

<p><img src="https://user-images.githubusercontent.com/95608811/173193344-e11fe49c-6039-43c6-804a-605df896c729.png" width="600px" /></p>

<p>위에서 model과 manufacture을 알면 model full name 필드를 아예 유지하지 않거나 참조하지 않아도 결정되기 때문에 {model,manufactor} -&gt; model full name 이라고 할 수 있다. 하지만, {model, manufactor} -&gt; manufactor country 에서 model과 manufacturer country는 아무런 연관 관계가 없기 때문에, manufacturer country는 manufacturer와만 종속관계에 있게 되고 이를 부분 함수 종속이라고 하게 되는 것이다.  아래의 그림을 보면 쉽게 이해할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/95608811/173193358-c3119a2b-09ed-4103-97ec-d524f01144ff.png" width="600px" /></p>

<p>위에서 부분 함수 종속을 제거 하게 되면, 아래와 같은 그림이 된다.</p>

<p><img src="https://user-images.githubusercontent.com/95608811/173193379-dcafdf0f-6840-4e8a-8c58-ed4ca6d7fb87.png" width="600px" /></p>

<p>따라서, 부분 함수 종속을 제거한 이후의 테이블은 아래와 같고, 이는 제 2정규형을 만족한 테이블이다.</p>

<p><img src="https://user-images.githubusercontent.com/95608811/173193384-176d99b9-7694-4be3-b8c4-1572b50641b3.png" width="600px" /></p>

<ul>
  <li>왜 정규화 하는지를 생각하면 제2정규화는 <code class="language-plaintext highlighter-rouge">부분함수적종속성제거</code> 하나로 방식을 통일할 수 있다.</li>
</ul>

<h2 id="제3정규화">제3정규화</h2>

<ul>
  <li>테이블(Relation)이 제 3정규형을 만족한다는 것은 아래 두 가지 조건을 만족하는 것을 의미한다.
    <ol>
      <li>Relation이 제 2정규화 되었다.(The relation is in second normal form)</li>
    </ol>
  </li>
</ul>

<ol>
  <li>기본 키(primary key)가 아닌 속성(Attribute)들은 기본 키에만 의존해야 한다.</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/95608811/173193429-150e49b7-397e-486b-8e8e-9113c7d266e1.png" width="600px" /></p>

<p>위 테이블에서 {Tournament, Year}가 후보키가 된다. 하지만 Winner Date of Birth은 기본키가 아닌 속성인 Winner를 거쳐 {Tournament, Year}에 의존하고 있는 것을 알 수 있는데, 이는 3NF를 위반한 것이 된다. 따라서 테이블을 아래와 같이 둘로 나누어 주자</p>

<p><img src="https://user-images.githubusercontent.com/95608811/173193437-2e3d5c51-f6cf-4a07-97cd-c4e688a04eba.png" width="600px" /></p>

<p>위 테이블은 3정규화를 만족한 상태이다.</p>

<ul>
  <li>왜 정규화 하는지를 생각하면 제3정규화는 <code class="language-plaintext highlighter-rouge">이행적종속성</code> 하나로 방식을 통일할 수 있다.</li>
</ul>]]></content><author><name>Ino</name></author><category term="DB" /><category term="DB" /><category term="SQL" /><summary type="html"><![CDATA[정규화 ?]]></summary></entry><entry><title type="html">문서편집기 vi</title><link href="http://localhost:4000/system/2022/06/09/%EB%AC%B8%EC%84%9C%ED%8E%B8%EC%A7%91%EA%B8%B0vi.html" rel="alternate" type="text/html" title="문서편집기 vi" /><published>2022-06-09T00:00:00+09:00</published><updated>2022-06-09T00:00:00+09:00</updated><id>http://localhost:4000/system/2022/06/09/%EB%AC%B8%EC%84%9C%ED%8E%B8%EC%A7%91%EA%B8%B0vi</id><content type="html" xml:base="http://localhost:4000/system/2022/06/09/%EB%AC%B8%EC%84%9C%ED%8E%B8%EC%A7%91%EA%B8%B0vi.html"><![CDATA[<h2 id="vi-편집기">vi 편집기</h2>
<blockquote>
  <p>vi 편집기는 일반적으로 모드가 나누어져 있기 때문에, 따로 공부를 하지 않으면 사용할 때 어려움이 있다.</p>
</blockquote>

<ul>
  <li>명령모드 : 모드변경,복사,이동등의 작업</li>
  <li>편집모드 : 문서작성 및 편집</li>
  <li>
    <p>Last Line 모드 : 치환, 저장 및 종료 수행</p>
  </li>
  <li>명령모드에서 <code class="language-plaintext highlighter-rouge">i</code>,<code class="language-plaintext highlighter-rouge">o</code>,<code class="language-plaintext highlighter-rouge">a</code> 를 입력하면 편집모드로 이동된다
    <blockquote>
      <p>i 는 커서의 앞부분 부터, a 는 커서의 다음부분 부터, o를 입력하면 커서의 아래라인부터 입력이 된다</p>
    </blockquote>
  </li>
  <li>명령모드에서 <code class="language-plaintext highlighter-rouge">:</code>를 입력하면 <code class="language-plaintext highlighter-rouge">Last Line 모드</code>로 넘어가게 된다</li>
  <li><code class="language-plaintext highlighter-rouge">Last Line 모드</code>에서 <code class="language-plaintext highlighter-rouge">:wq</code> 등의 명령어로 모드에서 나올 수 있다
    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">:wq</code> 는 저장하고 나가기</p>
    </blockquote>
  </li>
</ul>

<h3 id="command-모드--가장-기본이-되는-모드-복사-붙여넣기-다른-모드로-전환-커서-이동-삭제-등">Command 모드 : 가장 기본이 되는 모드, 복사, 붙여넣기, 다른 모드로 전환, 커서 이동, 삭제 등</h3>

<p>(1) 커서 이동
<code class="language-plaintext highlighter-rouge">G</code> : 가장 마지막 줄로 이동 <br />
<code class="language-plaintext highlighter-rouge">gg</code> : 첫번째 줄로 이동 <br />
<code class="language-plaintext highlighter-rouge">[n]G</code> : n번째 줄로 이동  <br />
<code class="language-plaintext highlighter-rouge">$</code> : 커서가 위치한 줄의 맨 끝으로 이동   <br />
<code class="language-plaintext highlighter-rouge">O</code> : 커서가 위치한 줄의 맨 앞으로 이동   <br />
<code class="language-plaintext highlighter-rouge">w</code> : 커서가 한 단어씩 오른쪽으로 이동  <br />
<code class="language-plaintext highlighter-rouge">b</code> : 커서가 한 단어씩 왼쪽으로 이동</p>

<p>(2) 삭제
<code class="language-plaintext highlighter-rouge">x</code> : 한 문자 삭제,또는 Edit모드에서 백스페이스나 Delete키로 삭제 <br />
<code class="language-plaintext highlighter-rouge">dd</code> : 커서가 위치한 한 줄을 삭제 <br />
<code class="language-plaintext highlighter-rouge">d[커서이동]</code> : 커서가 이동하는 만큼 삭제</p>

<p>(3) : 수정
<code class="language-plaintext highlighter-rouge">r</code> : 커서가 위치한 부분의 문자 하나를 입력하는 문자로 대체 <br />
<code class="language-plaintext highlighter-rouge">u</code> : Ctrl + z 처럼 작업 취소</p>

<p>(4) : 복사 및 붙여넣기  <br />
<code class="language-plaintext highlighter-rouge">yy</code> : 커서가 위치한 한 줄을 복사 <br />
<code class="language-plaintext highlighter-rouge">y[커서이동]</code> : 커서 이동하는 만큼 복사</p>

<p><code class="language-plaintext highlighter-rouge">p</code> : 커서 밑이나 커서 다음에 붙여넣기</p>

<h3 id="edit-모드">Edit 모드</h3>
<ul>
  <li>실질적으로 문서를 편집하는 모드, 내용을 입력, 내용을 수정, 내용을 삭제  <br />
입력하고 싶은 내용을 입력하거나 백스페이스로 삭제</li>
</ul>

<h3 id="last-line-모드">Last Line 모드</h3>
<ul>
  <li>파일을 저장하거나, 종료하거나 저장하지 않고 그냥 종료, 검색,바꾸기 등</li>
</ul>

<p>(1) : 편집기 상태 변경  <br />
<code class="language-plaintext highlighter-rouge">:set nu</code> : 라인 넘버 표시  <br />
<code class="language-plaintext highlighter-rouge">:set nonu</code> : 라인 넘버 표시 안함   <br />
<code class="language-plaintext highlighter-rouge">:set ic</code> : 검색할 때 대소문자 무시   <br />
<code class="language-plaintext highlighter-rouge">:set noic</code> : 검색할 때 대소문자 구분</p>

<p>(2) : 검색 및 변환  <br />
<code class="language-plaintext highlighter-rouge">/[내용]</code> : 검색,<code class="language-plaintext highlighter-rouge">n</code> 다음검색,<code class="language-plaintext highlighter-rouge">N</code> 이전검색  <br />
<code class="language-plaintext highlighter-rouge">:%s/[찾을 내용]/[바꿀 내용]/g</code></p>

<p>(3) : 저장 및 종료  <br />
<code class="language-plaintext highlighter-rouge">:w</code> : 저장
<code class="language-plaintext highlighter-rouge">:q</code> : 종료 <br />
<code class="language-plaintext highlighter-rouge">:wq</code> : 저장 및 종료  <br />
<code class="language-plaintext highlighter-rouge">:w!</code> : 강제로 저장   <br />
<code class="language-plaintext highlighter-rouge">:q!</code> : 강제로 종료   <br />
<code class="language-plaintext highlighter-rouge">:wq!</code> : 저장 및 강제 종료</p>]]></content><author><name>Ino</name></author><category term="System" /><category term="vi" /><category term="vim" /><summary type="html"><![CDATA[vi 편집기 vi 편집기는 일반적으로 모드가 나누어져 있기 때문에, 따로 공부를 하지 않으면 사용할 때 어려움이 있다.]]></summary></entry><entry><title type="html">리눅스 기본구조와 명령어</title><link href="http://localhost:4000/system/2022/06/07/%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B8%B0%EB%B3%B8%ED%99%98%EA%B2%BD.html" rel="alternate" type="text/html" title="리눅스 기본구조와 명령어" /><published>2022-06-07T00:00:00+09:00</published><updated>2022-06-07T00:00:00+09:00</updated><id>http://localhost:4000/system/2022/06/07/%08%EB%A6%AC%EB%88%85%EC%8A%A4%20%EA%B8%B0%EB%B3%B8%ED%99%98%EA%B2%BD</id><content type="html" xml:base="http://localhost:4000/system/2022/06/07/%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B8%B0%EB%B3%B8%ED%99%98%EA%B2%BD.html"><![CDATA[<h2 id="리눅스-기본-환경">리눅스 기본 환경</h2>
<blockquote>
  <p>명령줄 인터페이스</p>
</blockquote>

<ul>
  <li>
    <p>텍스트 터미널을 통해 사용자의 컴퓨터가 상호 작용하는 방식을 뜻한다.</p>
  </li>
  <li>
    <p>즉, 작업 명령은 사용자가 컴퓨터 키보드 등을 통해 문자열의 형태로 입력하며 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다.</p>
  </li>
  <li>
    <p>명령어 구조 <br />
<code class="language-plaintext highlighter-rouge">명령어</code> : 시스템에서 특정 작업을 하기 위해 실행파일, 프로그램  <br />
<code class="language-plaintext highlighter-rouge">옵션</code> : 명령어를 어떻게 실행할 것인지 지정
일반적으로 대시(-) 문자 뒤에 옵션을 지정  <br />
<code class="language-plaintext highlighter-rouge">아규먼트(Argument)</code> :명령어에 의해서 영향을 받는 파일 or 디렉토리 등 특정 대상 <br />
ex) ls -al, ifconfig -a, netstat -anp</p>
  </li>
</ul>

<h2 id="디렉토리-관련-명령어">디렉토리 관련 명령어</h2>
<h3 id="먼저-디렉토리는-그냥-폴더이다">먼저 디렉토리는 그냥 폴더이다.</h3>
<ul>
  <li>pwd : 현재 작업 디렉토리 확인</li>
  <li>cd : 작업 디렉토리 변경 (change directory)</li>
  <li>ls : 디렉토리 내용 확인</li>
  <li>mkdir : 디렉토리 생성 (make directory)</li>
  <li>rmdir : 디렉토리 제거 (remove directory)</li>
  <li>mv : 디렉토리 이름 변경</li>
  <li>mv : 디렉토리 이동</li>
  <li>cp : 디렉토리 복사</li>
</ul>

<blockquote>
  <p>mv는 옵션에 따라 기능이 달라진다.</p>
</blockquote>

<ul>
  <li>ls [확인 할 디렉토리] : 디렉토리 내용 확인</li>
  <li>일반적으로 ls 명령어는 -al 옵션과 같이 사용한다</li>
  <li>
    <p>-a는 숨겨진 파일까지 모두 표시, -l은 좀 더 자세한 결과를 출력한다.</p>
  </li>
  <li>
    <p>mkdir [생성할 디렉토리 이름] : 지정한 이름으로 된 디렉토리를 생성 <br />
하위 구조도 함께 만들려면 -p옵션을 함께 사용</p>
  </li>
  <li>
    <p>rmdir [삭제할 디렉토리 이름] : 디렉토리를 삭제할 때 사용하는 명령어 내부에 특정 파일이나 디렉토리가 있으면 안에 파일을 삭제하고 삭제</p>
  </li>
  <li>
    <p>rm -r [삭제할 디렉토리 이름] : 파일을 삭제하는 rm명령어에 -r 옵션을 이용하여 디렉토리를 삭제할 수 있다.</p>
  </li>
  <li>cd [이동할 경로] : 작업 디렉토리를 다른 곳으로 변경할 때 사용</li>
</ul>

<h2 id="절대-경로--상대-경로">절대 경로 &amp; 상대 경로</h2>
<ul>
  <li>명령어를 사용할 때 경로를 입력하는 방식은 2가지가 있다.</li>
  <li>절대 경로 : 최상위 디렉토리인 /에서부터 특정 파일 또는 디렉토리의 경로를 모두 입력</li>
  <li>상대 경로 : 현재 작업 디렉토리를 기준으로 특정 파일 또는 디렉토리의 경로를 입력 <code class="language-plaintext highlighter-rouge">.</code>은 현재 디렉토리를 의미하고 <code class="language-plaintext highlighter-rouge">..</code>은 상위 디렉토리를 의미한다.
    <blockquote>
      <p>그래서 <code class="language-plaintext highlighter-rouge">cd ..</code> 이라는 명령어는 상위 폴더로 디렉토리를 이동해달라는 의미가 되는 것이다.  <br />
<code class="language-plaintext highlighter-rouge">cd /</code> 은 최상위 디렉토리로 이동해달라는건데, 그냥 <code class="language-plaintext highlighter-rouge">/</code>로 시작하면 절대경로가 되는데, 절대경로상 <code class="language-plaintext highlighter-rouge">/</code>는 가장 최상위 디렉토리라 그런것이다.</p>
    </blockquote>
  </li>
</ul>

<h2 id="파일-관련-명령어">파일 관련 명령어</h2>
<ul>
  <li>touch : 내용에 아무것도 없는 빈 파일을 생성</li>
  <li>
    <p>rm : 파일을 제거하는 명령어</p>
  </li>
  <li>
    <p>mv : 파일 이름 변경</p>
  </li>
  <li>
    <p>cp : 파일 복사</p>
  </li>
  <li>cat,head,tail,more  : 파일 내용 확인
    <blockquote>
      <p>전체적으로 디렉토리 명령어랑 겹치는 내용이 많다.</p>
    </blockquote>
  </li>
  <li>
    <p>touch [생성할 파일이름] : 생성할 파일이름 으로 비어있는 파일이 생성된다.</p>
  </li>
  <li>
    <p>rm, mv, cp 는 디렉토리 명령어랑 동일하게 사용한다.</p>
  </li>
  <li>
    <p>head는 옵션을 넣으면 위에서부터, tail은 아래서부터 보고 싶은 라인 수만큼 보여준다.</p>
  </li>
  <li>more 은 파일의 내용을 화면에 맞춰서 확인, space는 한 페이지씩 확인, enter는 한 줄 더 확인</li>
</ul>]]></content><author><name>Ino</name></author><category term="System" /><category term="linux" /><summary type="html"><![CDATA[리눅스 기본 환경 명령줄 인터페이스]]></summary></entry></feed>