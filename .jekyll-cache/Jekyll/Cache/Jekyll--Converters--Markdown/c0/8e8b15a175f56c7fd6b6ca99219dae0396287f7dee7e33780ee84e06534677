I"V<h4 id="들어가기-전에">들어가기 전에</h4>

<p>사실 스프링 공부를 여러번 시도 했었다.  <br />
HTTP, WAS, DB 등 백앤드에 관련된 지식이 없을 때 무작정 인프런에서 유명하다는 강사님의 인강을 보면서 따라 쳤는데
강의 내용의 반의 반도 습득하지 못했었다.  <br />
그렇게 두 번, 세 번 전체강의를 돌려보았고 결국 완벽한 이해는 못한 채 다른 프로젝트들을 시작했다.  <br />
Flask, Nest.js 등의 다른 프레임워크를 사용하다가 현업에서 가장 많이 쓰고 강력한 무기인 Spring을 다 씹어먹지 못한 게 너무 한이되어 다시 처음부터 개념을 씹어먹을거라는 각오로 블로그 글을 작성하면서 다시 공부하기로 했다. <br />
그래서, Code-based인 다른 포스트랑은 다르게 Spring은 내가 이해하고 추가적으로 궁금했었던 개념들을 위주로 글을 써내려가려고 한다.</p>

<p>추가로, 제목 앞에 붙는 넘버링은 Spring 공부 순서에 따라 정리하는 순으로 정리되며, 객관적으로 중요한 내용이더라도
필자가 기존에 제대로 이해하고 있었고 다시 공부하면서 배운 점이 없다면 굳이 포스팅으로 남기지 않으려고 한다.</p>

<h2 id="jpa는-왜-써야할까">JPA는 왜 써야할까?</h2>

<p>실제 프로젝트를 하다보면 DB Table들이 계속 많아지고 OOP를 준수하면서 코딩을 할 수록 매핑작업이 끝없이 늘어나게 된다.  <br />
그래서 ORM (Object Relational Mapping) 기술을 활용하여 코딩을 하면 조금 더 개발자답게(?) 코딩할 수 있게 된다.</p>

<p>레거시하게 JDBC에서 유저를 조회하는 쿼리문을 작성하는 예시를 보면 아래와 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LegacyJdbcExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserById</span><span class="o">(</span><span class="kt">long</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">PreparedStatement</span> <span class="n">preparedStatement</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">ResultSet</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"jdbc:mysql://localhost:3306/database_name"</span><span class="o">;</span>
            <span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">"username"</span><span class="o">;</span>
            <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"password"</span><span class="o">;</span>

            <span class="n">connection</span> <span class="o">=</span> <span class="nc">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"SELECT * FROM users WHERE id = ?"</span><span class="o">;</span>
            <span class="n">preparedStatement</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
            <span class="n">preparedStatement</span><span class="o">.</span><span class="na">setLong</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>

            <span class="n">resultSet</span> <span class="o">=</span> <span class="n">preparedStatement</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
                <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span>
                <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
                <span class="c1">// ... set other fields</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">resultSet</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">resultSet</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">preparedStatement</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">preparedStatement</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>반면에 JPA로 같은 기능을 하는 코드를 작성하면,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JpaExample</span> <span class="o">{</span>
    
    <span class="nd">@PersistenceContext</span>
    <span class="kd">private</span> <span class="nc">EntityManager</span> <span class="n">entityManager</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserById</span><span class="o">(</span><span class="kt">long</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이런식으로 Spring에서 제공해주는 EntityManager를 사용해 빠른 개발을 할 수 있다.</p>

<p>JPA는 Java애플리케이션과 JDBC 사이에서 동작하며, 이를 정확히 이해하려면 엔티티 매니저와 영속성 컨텍스트를 이해해야 한다.</p>

<h2 id="엔티티-매니저-팩토리와-엔티티-매니저">엔티티 매니저 팩토리와 엔티티 매니저</h2>

<p>사용자가 요청을 보낼 때 마다 EntityManagerFactory가 EntityManager 객체를 생성한다.  <br />
그렇게 생성된 EntityManager 객체는 ConnectionPool을 통해 DB에 저장, 조회된다.</p>

<h3 id="영속성-컨텍스트">영속성 컨텍스트</h3>

<p>엔티티 매니저를 통해서 영속성 컨텍스트에 접근할 수 있다.  <br />
Spring과 같은 프레임워크에서는 엔티티 매니저와 영속성 컨텍스트가 N:1 관계로,  <br />
각각의 EntityManager들이 하나의 PersistenceContext와 매핑되어 있는 구조이다.</p>

<p>엔티티의 생명주기에는 아래와 같은 상태가 존재한다.</p>

<ul>
  <li>
    <dl>
      <dt>비영속 (new/transient)</dt>
      <dd>영속성 컨텍스트와 전혀 관계가 없는 새로운 상태</dd>
    </dl>
  </li>
  <li>
    <dl>
      <dt>영속 (managed)</dt>
      <dd>영속성 컨텍스트에 관리되는 상태</dd>
    </dl>
  </li>
  <li>
    <dl>
      <dt>준영속 (detached)</dt>
      <dd>영속성 컨텍스트에 저장되었다가 분리된 상태</dd>
    </dl>
  </li>
  <li>
    <dl>
      <dt>삭제 (removed)</dt>
      <dd>삭제된 상태</dd>
    </dl>
  </li>
</ul>

<h4 id="비영속">비영속</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 단순히 객체를 생성하기만 한 상태</span>
<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"회원1"</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="영속">영속</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"회원1"</span><span class="o">);</span>

<span class="nc">EntitiyManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
<span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">().</span><span class="na">begin</span><span class="o">();</span>

<span class="c1">// 객체를 저장한 상태 (영속)</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="준영속-삭제">준영속, 삭제</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 영속성 컨텍스트에서 분리 (준영속)</span>
<span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 객체를 삭제한 상태 (삭제)</span>
<span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
</code></pre></div></div>

<p>결국 영속성 컨텍스트가 프레임워크 내에서 객체를 관리해주는 역할을 한다.</p>

<h3 id="영속성-컨텍스트의-이점">영속성 컨텍스트의 이점</h3>

<ul>
  <li>1차 캐시</li>
  <li>동일성 보장</li>
  <li>트랜잭션을 지원하는 쓰기 지연</li>
  <li>변경 감지(Dirty Checking)</li>
  <li>지연로딩(Lazy Loading)</li>
</ul>

<h4 id="1차-캐시">1차 캐시</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1차 캐시에 저장됨</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
<span class="c1">// 1차 캐시에서 조회</span>
<span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"member1"</span><span class="o">);</span>
</code></pre></div></div>

<p>이런식으로 사용했을 때 DB에서 find 하는 게 아니라, 1차 캐시에서 조회하기 때문에 빠른 응답을 제공할 수 있다.</p>

<p>만약 1차 캐시에 없다면, 이후 DB에서 조회를 하고 1차 캐시에 저장 후 반환하게 된다.</p>

<p>처음 공부할 때 Spring이 알아서 한번 조회했던 객체를 entityManager 내에 1차 캐시에 저장하면,   <br />
Redis (REmote Dictionary Server)는 Spring을 쓰면서 MSA로 구성할 때 메인노드로 쓸 때를 제외하면 굳이 Spring과 레디스를
같이 쓸 필요는 없겠네..? 라는 생각을 했었다.</p>

<p>그리고 의문이 1분만에 풀리는데, entityManager는 보통 한번 사용되고 바로 close 되는데, close되면서 1차 캐시에 있던 key-value가
날라가는 것이다.</p>

<p>그러니까 객체가 호출되면서 잠깐만 존재했다가 사라지는 존재였던 것이다.</p>

<h4 id="동일성-보장">동일성 보장</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">a</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"member1"</span><span class="o">);</span>
<span class="nc">Member</span> <span class="n">b</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"member1"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">);</span> 
<span class="c1">// 동일성 비교 true</span>
</code></pre></div></div>

<p>실제로 여러 번의 조회를 하더라도 트랜잭션 격리 수준을 DB가 아닌 Java 애플리케이션 차원에서 제공하기 때문에 동일성을 보장 받는다.</p>

<h4 id="트랜잭션을-지원하는-쓰기-지연">트랜잭션을 지원하는 쓰기 지연</h4>

<p>엔티티 등록 : 트랜잭션을 지원하는 쓰기 지연</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
<span class="nc">EntityTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>
<span class="c1">// 엔티티 매니저는 데이터 변경시 트랜잭션을 시작해야 한다.</span>
<span class="n">transaction</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span> <span class="c1">// [트랜잭션] 시작</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberA</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberB</span><span class="o">);</span>
<span class="c1">// 여기까지 INSERT SQL을 데이터베이스에 보내지 않는다.</span>
<span class="c1">// 커밋하는 순간 데이터베이스에 INSERT SQL을 보낸다.</span>
<span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">// [트랜잭션] 커밋</span>
</code></pre></div></div>

<p>트랜잭션이 커밋되기 전까지는 SQL을 보내지 않음으로 한번에 모아서 SQL을 호출해서 성능적인 부분에서 이점을 챙길 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberA</span><span class="o">);</span>
<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">memberB</span><span class="o">);</span>
<span class="c1">// 이때까지는 영속성 컨텍스트 내에 있는 1차 캐시에 저장만 하고 있다.</span>
</code></pre></div></div>

<p>추가로 commit()을 하더라도 영속 컨텍스트에 있는 1차 캐시가 날라가지는 않고, <code class="language-plaintext highlighter-rouge">em.close</code>를 해서 entityManager를 삭제해야 캐시가 날라간다.</p>

<h4 id="변경-감지dirty-checking">변경 감지(Dirty Checking)</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
<span class="nc">EntityTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>
<span class="n">transaction</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span> <span class="c1">// [트랜잭션] 시작</span>
<span class="c1">// 영속 엔티티 조회</span>
<span class="nc">Member</span> <span class="n">memberA</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"memberA"</span><span class="o">);</span>
<span class="c1">// 영속 엔티티 데이터 수정</span>
<span class="n">memberA</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"hi"</span><span class="o">);</span>
<span class="n">memberA</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="c1">//em.update(member) 이런 코드가 있어야 하지 않을까?</span>
<span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">// [트랜잭션] 커밋</span>
</code></pre></div></div>

<p>1차 캐시에 있는 member Entity와 스냅샷을 비교하여 UPDATE SQL을 쓰기지연 SQL 저장소에서 생성하기 때문에 UPDATE문이 필요가 없다.</p>

<h3 id="플러시-flush">플러시 Flush</h3>

<ul>
  <li>영속성 컨텍스트의 변경내용을 데이터베이스에 동기화</li>
</ul>

<h4 id="영속성-컨텍스트를-플러시하는-방법">영속성 컨텍스트를 플러시하는 방법</h4>

<ul>
  <li>em.flush() - 직접 호출</li>
  <li>트랜잭션 커밋 - 플러시 자동 호출</li>
  <li>JPQL 쿼리 실행 - 플러시 자동 호출</li>
</ul>

<h4 id="플러시-특성">플러시 특성</h4>

<ul>
  <li>영속성 컨텍스트를 비우지 않음</li>
  <li>영속성 컨텍스트의 변경내용을 데이터베이스에 동기화</li>
  <li>트랜잭션이라는 작업 단위가 중요 -&gt; 커밋 직전에만 동기화 하면 됨</li>
</ul>

<p>플러시 모드 옵션은 Default 상태에서 크게 건들 일이 없다.</p>

:ET