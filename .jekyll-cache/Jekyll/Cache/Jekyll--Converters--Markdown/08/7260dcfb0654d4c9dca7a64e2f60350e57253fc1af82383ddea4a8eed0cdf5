I"1<h2 id="메모리-영역">메모리 영역</h2>

<ol>
  <li>
    <p>코드 영역  <br />
코드 영역은 이름 처럼 작성한 코드를 저장하는 영역입니다.​</p>
  </li>
  <li>
    <p>데이터 영역  <br />
데이터 영역은 전역 변수와 정적 변수를 저장하는 영역입니다.  <br />
전역 변수는 프로그램이 시작되면서 초기화됩니다. <br />
그러므로 데이터 영역은 프로그램 시작시에 이미 메모리가 확보되어 크기가 변하지 않음을 알 수 있습니다.</p>
  </li>
  <li>
    <p>힙 영역
힙영역은 동적 메모리를 할당하는 영역입니다. <br />
C언어로 코드를 작성할 때 직접 메모리를 할당할 때가 있습니다.  <br />
이 때 메모리를 할당하는 영역이 바로 힙 영역입니다.</p>
  </li>
  <li>
    <p>스택 영역  <br />
스택 영역은 지역 변수와 매개변수를 저장하는 영역입니다. <br />
지역 변수와 매개 변수 특성 상 해당 함수의 호출과 실행이 완료되면 사라집니다.  <br />
그러므로 데이터가 저장되었다가 지워지기를 반복하는 영역임을 알 수 있습니다.</p>
  </li>
</ol>

<hr />

<h2 id="메모리할당-함수-malloccallocrealloc">메모리할당 함수 (malloc,calloc,realloc)</h2>
<blockquote>
  <p>메모리 관련함수는 헤더파일 <code class="language-plaintext highlighter-rouge">&lt;stdlib.h&gt;</code> 또는 <code class="language-plaintext highlighter-rouge">&lt;malloc.h&gt;</code>에 있다.   <br />
실제값 : *(p + i) == p[i];    <br />
주소 : p + i == &amp;p[i];</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">malloc</code> : 동적 메모리 함수</p>
<ul>
  <li>메모리를 미리 일정량 만큼 잡아두지 않고, 필요할때마다 동적으로 할당한다.</li>
  <li>필요할 때마다 동적으로 할당해서 메모리낭비를 줄여준다.</li>
  <li>형식 : 포인터변수 = (포인터변수의 데이터형 *)malloc(포인터변수의 데이터형 크기 * 필요한크기);</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// int형은 4바이트니깐, 총 40바이트를 할당한 상태이다.</span>
  <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>크기는 바이트형이고, malloc을 이용해 필요한만큼 동적할당을 해준다.</li>
  <li>사용후 free() 함수를 통해 할당된 공간을 반납해준다.</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">calloc</code> 함수</p>
<ul>
  <li>요청한 메모리공간을 0으로 초기화하여 할당함.</li>
  <li>형식 : 포인터변수 = (포인터변수의 데이터형 *)calloc(포인터변수의 데이터형 크기 * 필요한크기);</li>
  <li>malloc함수로 공간을 할당하면, 가비지값(쓰레기값)들이 들어가는데, calloc()함수를 이용해 할당하면,  <br />
원하는만큼 공간을 할당후 메모리공간도 0으로 초기화 해준다.</li>
  <li>
    <ul>
      <li>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">realloc</code> 함수</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>새로 동적메모리를 할당받고, 이전에 할당받은 메모리값을 복사하는 함수</li>
  <li>단독으로 사용이 불가능하며 이전에 malloc또는 calloc으로 할당받았던 경험이 있어야함.</li>
  <li>형식 : 포인터변수 = (포인터변수 *)realloc(기본포인터, 포인터변수의 데이터형 크기 * 필요한크기;</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">realloc</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))</span> <span class="c1">// 이전라인에서의 p의값을 복사해서 넣는다.</span>
  <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

:ET