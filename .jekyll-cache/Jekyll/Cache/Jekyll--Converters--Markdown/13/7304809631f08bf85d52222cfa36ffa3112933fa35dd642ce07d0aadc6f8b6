I"6<h2 id="mappedsuperclass-공통-매핑-정보의-재사용">MappedSuperclass: 공통 매핑 정보의 재사용</h2>

<h3 id="개요">개요</h3>

<p><code class="language-plaintext highlighter-rouge">MappedSuperclass</code>는 JPA에서 상속 관계 매핑이 아닌 공통 매핑 정보의 재사용을 위해 사용됩니다. <br />
이 방법은 데이터베이스 설계와 객체지향 설계의 불일치 문제를 해결하는 데 도움을 줍니다.</p>

<h3 id="주요-특징">주요 특징</h3>
<ul>
  <li>
    <p>공통 매핑 정보 제공: @MappedSuperclass로 지정된 클래스는 데이터베이스 테이블로 직접 매핑되지 않습니다.
대신, 이 클래스에 정의된 매핑 정보(필드, 관계, 메서드 등)는 상속받는 자식 클래스에게 상속됩니다.</p>
  </li>
  <li>
    <p>엔티티가 아님: @MappedSuperclass로 지정된 클래스는 엔티티가 아닙니다. 즉, EntityManager를 통해 직접 쿼리하거나 데이터베이스 작업을 할 수 없습니다.</p>
  </li>
  <li>
    <p>상속받는 자식 클래스들의 매핑 정보: 자식 클래스들은 @MappedSuperclass에서 정의된 필드나 메서드를 상속받아 사용할 수 있으며, 각각 독립적인 테이블로 매핑됩니다.</p>
  </li>
  <li>
    <p>재사용성과 유지보수성 향상: 공통적인 매핑 정보를 @MappedSuperclass에 정의함으로써, 코드의 재사용성과 유지보수성이 향상됩니다.</p>
  </li>
</ul>

<h3 id="사용-예시">사용 예시</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MappedSuperclass</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="c1">// 공통으로 사용되는 필드 및 메서드</span>
    <span class="c1">// getters and setters</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="c1">// 추가적인 필드 및 메서드</span>
    <span class="c1">// getters and setters</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">productName</span><span class="o">;</span>
    <span class="c1">// 추가적인 필드 및 메서드</span>
    <span class="c1">// getters and setters</span>
<span class="o">}</span>

</code></pre></div></div>
<p>이 예시에서 BaseEntity 클래스는 @MappedSuperclass로 지정되어 있으며, User와 Product 엔티티가 이를 상속받습니다.   <br />
BaseEntity의 id 필드와 관련 메서드는 User와 Product 엔티티에 모두 상속되며, 각각의 엔티티는 자신만의 테이블로 매핑됩니다.</p>

<h2 id="일반적인-jpa에서의-extend--상속을-쓰는-경우">일반적인 JPA에서의 extend : 상속을 쓰는 경우</h2>

<h3 id="entity-상속">Entity 상속</h3>
<p>한 엔티티 클래스가 다른 엔티티 클래스를 상속할 때 사용합니다.   <br />
상속받는 클래스는 @Entity 어노테이션으로 표시되며, 데이터베이스 테이블과 매핑됩니다.   <br />
사용되는 상속 전략에는 단일 테이블 상속(SINGLE_TABLE), 조인 테이블 상속(JOINED), 테이블 당 클래스 상속(TABLE_PER_CLASS) 등이 있습니다.</p>

<h3 id="mappedsuperclass-상속">MappedSuperclass 상속</h3>
<p>@MappedSuperclass 어노테이션이 적용된 클래스를 상속받을 때 사용됩니다.  <br />
여러 엔티티 클래스에서 공통으로 사용되는 매핑 정보(필드, 메서드 등)를 정의하는 데 사용됩니다.   <br />
상속받는 엔티티들은 @MappedSuperclass에서 정의된 정보를 재사용할 수 있으며, 각각 독립적인 테이블로 매핑됩니다.</p>

<h2 id="결론">결론</h2>
<p>MappedSuperclass는 JPA에서 매핑 정보의 중복을 줄이고, 코드의 재사용성 및 유지보수성을 향상시키는 유용한 방법입니다. <br />
하지만, 이는 엔티티가 아니므로 데이터베이스와의 직접적인 상호작용은 할 수 없습니다.   <br />
따라서, 이를 사용할 때는 엔티티와의 차이점을 명확히 이해하고 적절히 활용해야 합니다.</p>
:ET