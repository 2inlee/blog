I"<h1 id="solid">SOLID</h1>
<h3 id="클린코드로-유명한-로버트-마틴의-객체-지향-설계의-5가지-원칙">클린코드로 유명한 로버트 마틴의 객체 지향 설계의 5가지 원칙</h3>

<p>SOLID란 객체 지향 프로그래밍을 하면서 지켜야하는 5대 원칙으로 각각 SRP(단일 책임 원칙), OCP(개방-폐쇄 원칙), LSP(리스코프 치환 원칙), DIP(의존 역전 원칙), ISP(인터페이스 분리 원칙)의 앞글자를 따서 만들어졌다. SOLID 원칙을 철저히 지키면 시간이 지나도 변경이 용이하고, 유지보수와 확장이 쉬운 소프트웨어를 개발하는데 도움이 되는 것으로 알려져있다.</p>

<h3 id="srp--단일-책임-원칙-single-responsibility-principle">SRP : 단일 책임 원칙 (single responsibility principle)</h3>

<ul>
  <li>한 클래스는 하나의 책임만 가져야 한다.</li>
  <li>하나의 책임이라는 것은 모호하다 ( 문맥과 상황에 따라 다르다. )</li>
  <li>중요한 기준은 변경이다. 변경이 있을 때 파급효과가 적으면 단일 책임 원칙을 잘 따른 것
    <blockquote>
      <p>ex) 객체 생성과 사용을 분리, 디스플레이에 띄우는 부분과 핵심로직은 분리</p>
    </blockquote>
  </li>
</ul>

<h3 id="ocp--개방-폐쇄-원칙-openclosed-principle">OCP : 개방-폐쇄 원칙 (Open/Closed principle)</h3>

<ul>
  <li>소프트웨어 요소는 확장에는 열려있으나, 변경에는 닫혀있어야한다.</li>
  <li>확장에 대해 열려 있다: 요구사항이 변경될 때 새로운 동작을 추가하여 애플리케이션의 기능을 확장할 수 있다.</li>
  <li>
    <p>수정에 대해 닫혀 있다: 기존의 코드를 수정하지 않고 애플리케이션의 동작을 추가하거나 변경할 수 있다.</p>
  </li>
  <li>
    <p>개방 폐쇄 원칙을 지키기 위해서는 추상화에 의존해야 한다. 추상화란 핵심적인 부분만 남기고, 불필요한 부분은 제거함으로써 복잡한 것을 간단히 하는 것이고, 추상화를 통해 변하지 않는 부분만 남김으로써 기능을 구체화하고 확장할 수 있다. 변하지 않는 부분은 고정하고 변하는 부분을 생략하여 추상화함으로써 변경이 필요한 경우에 생략된 부분을 수정하여 개방-폐쇄의 원칙을 지킬 수 있다.</p>
  </li>
  <li>다형성을 위한 추상화를 활용해서 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현한다.</li>
</ul>

<h3 id="lsp--리스코프-치환-원칙-liskov-substitution-principle">LSP : 리스코프 치환 원칙 (Liskov substitution principle)</h3>
<ul>
  <li>프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인터페이스로 바꿀 수 있어야 한다.</li>
  <li>다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체를 믿고 사용하려면, 이 원칙이 필요하다.</li>
  <li>단순히 컴파일에 성공하는 것을 넘어서는 이야기로 상식적으로 해당 객체의 생성 목적대로 사용하면 된다.</li>
</ul>

<h3 id="isp--인터페이스-분리-원칙-interface-segregation-principle">ISP : 인터페이스 분리 원칙 (Interface segregation principle)</h3>
<ul>
  <li>특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.</li>
  <li>자동차 인터페이스 -&gt; 운전 인터페이스, 정비 인터페이스로 분리</li>
  <li>사용자 클라이언트 -&gt; 운전자 클라이언트, 정비사 클라이언트로 분리</li>
  <li>분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음</li>
  <li>인터페이스가 명확해지고, 대체 가능성이 높아진다.</li>
</ul>

<h3 id="dip--의존관계-역전-원칙-dependency-inversion-principle">DIP : 의존관계 역전 원칙 (Dependency inversion principle)</h3>
<ul>
  <li>프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 의존성 주입은 이 원칙을 따르는 방법 중 하나이다.</li>
  <li>쉽게 말해서 구현 클래스에 의존하지말고, 인터페이스에 의존하라는 뜻이다.</li>
  <li>앞에서 이야기한 역할(Role)에 의존하게 해야 한다는 것과 같다.  <br />
객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다.  <br />
구현체에 의존하게 되면 수정이 어려워지게 된다.</li>
</ul>

<h2 id="정리하자면">정리하자면,</h2>
<p>객체지향의 핵심은 다형성인데, 다형성 만으로는 OCP랑 DIP를 지킬 수가 없다.</p>

<p>끝.</p>

<h2 id="이-아니라-스프링은-didependency-injection으로-다형성--ocp-dip를-가능하게-지원한다">이 아니라 스프링은 DI(Dependency Injection)으로 다형성 + OCP, DIP를 가능하게 지원한다.</h2>

<p>그래서, 스프링을 쓰자.</p>
:ET